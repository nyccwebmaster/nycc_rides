<?php

function nycc_rides_menu() {
  $items = array();
  
  $items['nycc-approve-ride/%'] = array(
    //'page arguments' => array(1),
    'page callback' => 'nycc_rides_approve_ride',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['nycc-update-ride-status-js/%'] = array(
    //'page arguments' => array(1),
    'page callback' => 'nycc_rides_update_ride_status_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['nycc-update-ride-type-js/%'] = array(
    //'page arguments' => array(1),
    'page callback' => 'nycc_rides_update_ride_type_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['nycc-join-ride'] = array(
    'page callback' => 'nycc_rides_join_ride',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['nycc-withdraw-from-ride'] = array(
    'page callback' => 'nycc_rides_withdraw_from_ride',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['nycc-existing-rides-js'] = array(
    'page callback' => 'nycc_rides_existing_rides_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  // used by ajax buttons
  $items['nycc-ride-participants-js'] = array(
    'page callback' => 'nycc_rides_ride_participants_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  // used by ajax buttons
  $items['nycc-ride-waiters-js'] = array(
    'page callback' => 'nycc_rides_ride_waiters_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  // used for printpdf
  $items['nycc-riders-roster-pdf'] = array(
    'page callback' => 'nycc_rides_output_riders_roster_pdf',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['nycc-rides-report'] = array(
    'page callback' => 'nycc_rides_report_leaders',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
    'file' => 'nycc.reports.inc',
    'title' => 'Ride Reports'
  );

  $items['nycc-rides-report/leaders'] = array(
    'page callback' => 'nycc_rides_report_leaders',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => TRUE,
    'file' => 'nycc.reports.inc',
    'title' => 'Leaders'
  );

  $items['nycc-rides-report/riders'] = array(
    'page callback' => 'nycc_rides_report_riders',
    'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
    'file' => 'nycc.reports.inc',
    'title' => 'Riders'
  );

  $items['user/%user_uid_optional/myrides'] = array(
    'page callback' => 'nycc_rides_report_rides',
    'type' => MENU_LOCAL_TASK,
    //'access callback' => TRUE,
    'access callback' => 'nycc_rides_report_rides_access',
    'file' => 'nycc.reports.inc',
    'title' => 'Rides',
    'page arguments' => array(1),
  );

  $items['user/%user_uid_optional/mywaitlists'] = array(
    'page callback' => 'nycc_rides_report_waitlists',
    'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
    'file' => 'nycc.reports.inc',
    'title' => 'Waitlists',
    'page arguments' => array(1),
  );

  $items['user/%user_uid_optional/myleads'] = array(
    'page callback' => 'nycc_rides_report_leads',
    'type' => MENU_LOCAL_TASK,
    //'access callback' => TRUE,
    'access callback' => 'nycc_rides_report_leads_access',
    'file' => 'nycc.reports.inc',
    'title' => 'Leads',
    'page arguments' => array(1),
  );

  $items['approve-rides'] = array(
    'page callback' => 'nycc_rides_approve_rides',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['node/%/cancel'] = array(
    'title' => 'Cancel Ride',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nycc_rides_ride_cancel_confirm', 1),
    'access callback' => 'nycc_rides_access',
    'access arguments' => array('cancel', 1),
    'type' => MENU_CALLBACK,
  );

//   $items['node/%/attend'] = array(
//     'title' => 'Ride Attendance and Notes',
//     'page callback' => 'drupal_get_form',
//     'page arguments' => array('nycc_ride_attend', 1),
//     'access callback' => TRUE,
//     //'access callback' => 'nycc_access',
//     //'access arguments' => array('attend', 1),
//     'type' => MENU_CALLBACK,
//   );

  return $items;
}

//This function is used to log members ride joins & withdrawals 
function nycc_rides_log_action($node, $uid, $action_type)
{	
	$action_debug = false;
	
    if ($action_debug ) watchdog('nycc_log_action', 'Checking if is object', array(), WATCHDOG_NOTICE) ;
	if(is_object($node))
	{
	    if ($action_debug ) watchdog('nycc_log_action', 'Checking if is ride', array(), WATCHDOG_NOTICE) ;
		if($node->type == 'rides')
		{
			if ($action_debug ) watchdog('nycc_log_action', 'Checking action type', array(), WATCHDOG_NOTICE) ;
			switch($action_type) {
				case "Join A Ride":
					if ($action_debug ) watchdog('nycc_log_action', 'Action type is Join A Ride', array(), WATCHDOG_NOTICE) ;

					if (($node->field_ride_spots[0]['value'] == 0) || ($node->field_ride_spots[0]['value'] ==""))
						$available_spots = 9999999;
					else
						$available_spots = $node->field_ride_spots[0]['value'] - nycc_rides_count_riders($node);
						
					break;

				case "Join A Waitlist":
					if ($action_debug ) watchdog('nycc_log_action', 'Action type is Join A Waitlist', array(), WATCHDOG_NOTICE) ;
					$available_spots = nycc_rides_count_waiters($node) * -1;
					break;		

				case "Auto-Join From Waitlist":
					if ($action_debug ) watchdog('nycc_log_action', 'Action type is Auto-Join From Waitlist', array(), WATCHDOG_NOTICE) ;
					$available_spots = 0;
					break;
			
				case "Withdraw From Ride":
					if ($action_debug ) watchdog('nycc_log_action', 'Action type is Withdraw From Ride', array(), WATCHDOG_NOTICE) ;

					if (($node->field_ride_spots[0]['value'] == 0) || ($node->field_ride_spots[0]['value'] ==""))
						$available_spots = 9999999;
					else
						$available_spots = $node->field_ride_spots[0]['value'] - nycc_rides_count_riders($node);
					break;

				case "Withdraw From Waitlist":
					if ($action_debug ) watchdog('nycc', 'nycc_log_action - action type is Withdraw From Waitlist', array(), WATCHDOG_NOTICE) ;
					$available_spots = nycc_rides_count_waiters($node) * -1;
					break;
			    default:
			    	watchdog('nycc_log_action', 'Unknown action type: ' . $action_type, array(), WATCHDOG_ERROR) ;
			    	break;
			    	
			} 
			watchdog("nycc_log_action", "Logging: " . $action_type . " " . $user_uid . " " .  $node->nid . " " . time() . " " . strtotime(nycc_get_ride_datetime($node)) . " " .  $available_spots , array(), WATCHDOG_NOTICE) ;
			
			if($action_type=="Withdraw From Ride" || $action_type=="Withdraw From Waitlist")
			{
		        $sql = "INSERT INTO {nycc_action_log} (`uid`, `node_id`, `action_time`, `action`, `event_type`, `event_start_time`, `avail_at_action_time`, `parent_aid`) VALUES (%d, %d, %d, '%s', '%s', %d, %d, (select a.aid from {nycc_action_log} a where a.uid=%d and a.node_id=%d and (a.action='%s' OR a.action='%s') ORDER by a.aid DESC LIMIT 1 ) )";
				$q = db_query($sql, $uid, $node->nid, time(), $action_type, "Ride", strtotime(nycc_rides_get_ride_datetime($node)), $available_spots, $uid, $node->nid, "Join A Ride", "Join A Waitlist");
			
			} else {
		        $sql = "INSERT INTO {nycc_action_log} (`uid`, `node_id`, `action_time`, `action`, `event_type`, `event_start_time`, `avail_at_action_time`) VALUES (%d, %d, %d, '%s', '%s', %d, %d)";
				$q = db_query($sql, $uid, $node->nid, time(), $action_type, "Ride", strtotime(nycc_rides_get_ride_datetime($node)), $available_spots);
			
			} 

		} else {
			watchdog('nycc_log_action', 'Unknown node type: ' . $node->type, array(), WATCHDOG_ERROR) ;
		}
	} else {
		watchdog('nycc_log_action', 'Node is not object', array(), WATCHDOG_ERROR) ;
	}
}


//This function accepts a timestamp (generally time()) and an hours interval and generates an email to the leaders of rides starting between those intervals
//NOTE: It has a hard coded action ID
// function nycc_ride_roster_email($timestamp, $hrs) {
// 	$rr_debug = true;
// 	$actionID = 5;	// 5 is the tokenized email action for roster emails
// 	
//   $sql =<<<EOS
// SELECT N.nid AS nid, U.uid AS uid 
// FROM node N  
// INNER JOIN content_type_rides R ON N.nid = R.nid  AND N.vid = R.vid
// Inner JOIN content_field_ride_leaders L ON N.vid = L.vid AND N.nid = L.nid
// INNER JOIN node NL ON L.field_ride_leaders_nid = NL.nid 
// INNER JOIN users U ON NL.uid = U.uid 
// WHERE  R.field_ride_status_value = 'Approved' 
// AND N.type = 'rides'
// AND (R.field_ride_timestamp_value BETWEEN from_unixtime($timestamp) AND DATE_ADD(NOW(), INTERVAL $hrs HOUR)) 
// ; 
// EOS;
// 	if ($rr_debug ) watchdog("nycc-ride_roster", "SQL is " .  $sql, array(), WATCHDOG_NOTICE);        
// 	$ride_count = 0;
// 	$q = db_query($sql);
//   	while ($row = db_fetch_object($q)) {
//     	$ride = node_load(array('nid' => $row->nid));
// 		$acct = user_load(array('uid' => $row->uid));
//     	if ( ($ride) && ($acct) ) {
//     		$ride_count++;
//           	$cp = content_profile_load('profile', $acct->uid);
//           	if ($cp) {
//             	if ($cp->field_ride_rosters[0]['value'] != "false") {    		
//         			$context = array('hook' => 'cron', 'op' => 'send', 'node' => $ride, 'user' => $acct);
//         			actions_do($actionID, $acct, $context);     
//     		if ($rr_debug ) watchdog("nycc-ride_roster", $acct->name . " sent a roster for ride <a href='/node/". $ride->nid ."'>". $ride->title ."</a>");        
//         		} else {
// 	        	if ($rr_debug ) watchdog("nycc-ride_roster", $acct->name . " skipping roster for ride <a href='/node/". $ride->nid ."'>". $ride->title ."</a>");        
//         		}
//         	} else {// if cp
//         		watchdog("nycc-ride_roster", "Could not load profile for user: " . $acct->uid, array(), WATCHDOG_WARNING) ;    
//         	}
//     	}  else  { //no ride or user
//     		watchdog("nycc-ride_roster", "Could not load Ride: " . $row->nid . " or User: " . $row->nid, array(), WATCHDOG_WARNING) ;    
//     	}
//   	}  // while
//   	if($ride_count > 0) {
// 	  	if ($rr_debug ) watchdog("nycc-ride_roster", $ride_count . " rides found starting within " . $hrs . " hours" , array(), WATCHDOG_NOTICE) ;
//   	} else {
// 		if ($rr_debug ) watchdog("nycc-ride_roster", "No rides found starting within " . $hrs . " hours", array(), WATCHDOG_NOTICE);        
//   	}
// }

//This function is used by a custom token to generate a roster to be emailed
//NOTE: It contains hardcoded view name and display IDs
// function nycc_output_riders_roster_html($nid = null) {
// 	$rr_debug = true;
//  
//  	$view_name = "ride_participants";
// 	$display_name = "block_4";
// 	
// 	if (is_object($nid)) {
// 		$ride = $nid;
//     	$nid = $ride->nid;
// 	} elseif (is_numeric($nid) && ($nid > 0))  {
//      	$ride = node_load(array('nid' => $nid));
//  	}
//     if ($ride) {      
//       	$leaders = nycc_refs2ids(nycc_noderefs2userrefs($ride->field_ride_leaders));
//       	$riders = nycc_refs2ids($ride->field_ride_current_riders);
//       	$waiters = nycc_refs2ids($ride->field_ride_waitlist);
//       	$roster = array(implode("+", array_filter(array_merge($leaders, $riders, $waiters))));
//       	
// //       	if ($rr_debug ) watchdog("nycc-ride_roster", "Roster for ride: " . $nid . " is: " . implode("+", array_filter(array_merge($leaders, $riders, $waiters))) , array(), WATCHDOG_NOTICE);        
//  //      	dpm(array_filter(array_merge($leaders, $riders, $waiters)));
//        	
//   		$view = views_get_view($view_name);
//   		if($view){
//   		
// 			global $user;
// 			$original_user = $user;
// 			$old_state = session_save_session();
// 			session_save_session(FALSE);
// 			$user = user_load(array('uid' => 1));  		
// 	  	
// 	  		$view->hide_admin_links=TRUE;
//   			
//   			$output = $view->preview($display_name, $roster);
//   			
// 			$user = $original_user;
// 			session_save_session($old_state);
//   			return $output;
//   		} else { //coulnd't love view
//   			watchdog("nycc-ride_roster", "Could not load View: " . $view_name . " from function nycc_output_riders_roster_html", array(), WATCHDOG_ERROR) ; 
//   		}
// 
// 	} else { //no ride loaded
//  		watchdog("nycc-ride_roster", "Could not load Ride: " . $nid . " from function nycc_output_riders_roster_html", array(), WATCHDOG_ERROR) ; 
//  	}
//  }

function nycc_rides_report_rides_access() {
  global $user;
  $acctid = arg(1);
  //dpm(get_defined_vars());
  if (($user->uid == $acctid) 
  			|| in_array("administer", $user->roles) 
  			|| in_array("board members", $user->roles) 
  			|| user_access('administer users') 
  			|| in_array("paid member", $user->roles) )
    return TRUE;
  return FALSE;
}

function nycc_rides_report_leads_access() {
  global $user;
  $acctid = arg(1);
  //dpm(get_defined_vars());
  if (($user->uid == $acctid) 
  		|| in_array("administer", $user->roles) 
  		|| in_array("board members", $user->roles) 
  		|| in_array("paid member", $user->roles) 
  		|| user_access('administer users'))
    return TRUE;
  return FALSE;
}

function nycc_rides_perm() {
  return array('view incentives report');
}


function nycc_rides_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($form_id == "rides_node_form") {

    if (arg(1) == 'add')
      $d = date("m/d/Y"); //date("m-d-Y");
    else {
      $t = $form['field_date_ride_first'][0]['#value']['value'];
      if (!drupal_strlen($t))
        $t = $form['field_date_ride_first'][0]['#default_value']['value'];
      //$d = nycc_rides_get_date($t, "m-d-Y");
      $d = nycc_rides_get_date($t, "m/d/Y");
    }

    $form['existing_rides_wrapper'] = array(
      '#type' => 'markup',
      '#value' => nycc_rides_output_existing_rides(str_replace("-","/",$d)),
    );

    $form['nycc_rides_datepicker'] = array(
      '#type' => 'hidden',
      '#value' => $d,
    );

    $form['choose_calendar_target'] = array(
      '#type' => 'checkboxes',
      '#options' => array('yes' => t('Calendar clicks append recurring dates.')),
      '#attributes' => array('class' => 'nycc-append-dates-control'),
    );

    //dsm($form['field_ride_additional_dates']);
    $form['field_ride_additional_dates'][0]['#default_value']['value'] = $d;
    $form['field_ride_additional_dates']['#required'] = true;

    $status = nycc_rides_get_ride_status($form['#node']);
    $action = !nycc_rides_can_approve() && in_array($status, array('Approved','Pending','Cancelled', 'Flagged')) ? "Re-submit" : "Submit";
    $form['submit_instructions'] = array(
      '#prefix' => "<div id='nycc-submit-ride'>",
      '#value' => "Are you sure you want to $action this ride? Doing so will trigger emails to your ride coordinator, other ride leaders and any participants, in the case of re-submissions.",
    );
    $form['buttons']['submit']['#value'] = "Yes, $action this ride";
    $form['submit_cancel'] = array(
      '#suffix' => "</div>",
      '#value' => "<a href='#' onclick='$(\"#nycc-submit-ride\").hide(); return false;' title='No, hide this box again.'>No</a>",
    );

    if ($status == 'Approved') {

      $form['revision_information']['log']['#description'] = t("Ride Leaders: please provide an explanation of the additions or updates being made to help Ride Coordinators understand your changes.  Note that changing an approved ride will result in the ride being re-sumitted for approval and trigger email alerts to all riders. Revisions are optional for Ride Coordinators and Administers.");
      $form['revision_information']['#collapsible'] = 'fieldset';
      $form['revision_information']['#collapsible'] = false;
      $form['revision_information']['#collapsed'] = false;
      $form['revision_information']['#title'] = t("This is an approved ride!");
      $form['revision_information']['log']['#type'] = "textarea";
      $form['revision_information']['log']['#title'] = t("Revision summary");
      $form['revision_information']['log']['#attributes'] = array('placeholder' =>'e.g., start time change');
      $form['revision_information']['log']['#rows'] = 3;
      $form['revision_information']['revision']['#default_value'] = false;
      if (!nycc_rides_can_approve()) {
        $form['revision_information']['revision']['#default_value'] = true;
        $form['revision_information']['log']['#required'] = true;
      }
    }
  }
}

function nycc_rides_status_select_ahah($node, $ride_status) {
  $form = nycc_ride_status_select_form($node, $ride_status);
  return "<form>". drupal_render(form_expand_ahah($form)). "</form>";
}

function nycc_rides_type_select_ahah($node, $ride_type) {
  $form = nycc_ride_type_select_form($node, $ride_type);
  return "<form>". drupal_render(form_expand_ahah($form)). "</form>";
}

function nycc_rides_status_select_form($node, $ride_status) {
  if (is_numeric($node))
    $nid = $node;
  else
    $nid = $node->nid;
  $ele = array(
    '#type' => 'select',
    '#id' => "ride-status-$nid",
    '#name' => 'ride-status',
    '#attributes' => array('class' => 'ride-status'),
    '#options' =>  nycc_ride_status_options(),
    '#value' => $ride_status,
    '#ahah' => array(
      'path' => "nycc-update-ride-status-js/$nid",
      'wrapper' => "ride-status-$nid-wrapper",
      'event' => 'change',
    ),
  );
  return $ele;
}

function nycc_rides_type_select_form($node, $ride_type) {
  if (is_numeric($node))
    $nid = $node;
  else
    $nid = $node->nid;
  $ele = array(
    '#type' => 'select',
    '#id' => "ride-type-$nid",
    '#name' => 'ride-type',
    '#attributes' => array('class' => 'ride-type'),
    '#options' =>  nycc_ride_type_options(),
    '#value' => $ride_type,
    '#ahah' => array(
      'path' => "nycc-update-ride-type-js/$nid",
      'wrapper' => "ride-type-$nid-wrapper",
      'event' => 'change',
    ),
  );
  return $ele;
}

// function nycc_output_profile_buttons($account) {
//   global $user;
// 
//   // logic controls access and button content
//   // do we need $cp ?
//   if (is_numeric($account))
//     $uid = $account;
//   else
//     $uid = $account->uid;
// 
//   $output = "<div id='nycc-profile-buttons'>";
//   if (arg(2))
//     $output .= nycc_rides_output_button("View Profile", "/user/$uid", "nycc-profile-view");
//   if (arg(2) != 'edit' && ($user->uid == $account->uid || in_array("administer", $user->roles) || user_access('administer users')))
//     $output .= nycc_rides_output_button("Account Settings", "/user/$uid/edit", "nycc-profile-account");
//   if (arg(2) != 'profile' && ($user->uid == $account->uid || in_array("administer", $user->roles) || user_access('administer users')))
//     $output .= nycc_rides_output_button("Profile Settings", "/user/$uid/profile/profile", "nycc-profile-settings", "", "");
//   // todo: check for contact setting
//   if (arg(2) != 'contact' && $user->contact)
//     $output .= nycc_rides_output_button("Contact Me", "/user/$uid/contact", "nycc-profile-contact");
//   if (arg(2) != 'myrides')
//     $output .= nycc_rides_output_button("My Rides", "/user/$uid/myrides", "nycc-profile-rides");
//   if (arg(2) != 'myleads')
//     $output .= nycc_rides_output_button("My Leads", "/user/$uid/myleads", "nycc-profile-leads");
//   $output .= '</div>';
//   return $output;
// }

function nycc_rides_output_ride_buttons($nid) {
  global $user;
  $user_uid = $user->uid;
  if (is_object($nid)) {
    $ride = $nid;
    $nid = $ride->nid;
  } else
    $ride = node_load(array('nid' => $nid), null, true);

  // TODO: test for valid ride node

  // ride time as binary
  $ridetime = strtotime(nycc_rides_get_ride_datetime($ride));

  $no_of_riders = nycc_rides_count_riders($ride);
  $no_of_spots = $ride->field_ride_spots[0]['value'];
  if ($no_of_spots)
    $available_spots = $no_of_spots - $no_of_riders;
  $title = $ride->title;
  $path = "node/$nid";
  $output = "<div id='nycc-ride-buttons'>";

  if (!arg(2) && nycc_rides_can_approve() && ($ride->field_ride_status[0]['value'] != "Approved")) {
    $output .= nycc_rides_output_button("Approve This Ride", "/nycc-approve-ride/$nid", "nycc-ride-approve-ride", "", "");
  }

  if (!arg(2) && nycc_rides_can_modify_ride($ride)) {
    $output .= nycc_rides_output_button("Revise Ride Details", "/node/$nid/edit", "nycc-ride-revise", "", "");
  }

  //dsm(get_defined_vars());
  //dsm(array("nycc_is_waiting" => nycc_is_waiting($ride), "field_ride_waitlist" => $ride->field_ride_waitlist));
  if ($ride->field_ride_signups[0]['value'] != "No signups or waiting list") {
    if (nycc_is_rider($ride) && !arg(2) && nycc_ride_is_upcoming($ride)) {
      // TODO: check that signups are allowed
      $output .= nycc_rides_output_button("Withdraw From Ride", "#", "nycc-withdraw-from-ride-button", '$("input#nycc-withdraw-from-ride").click(); return false;',"");
    }
    else if (nycc_is_waiting($ride) && !arg(2) && nycc_ride_is_upcoming($ride)) {
      // TODO: check that signups are allowed?
      $output .= nycc_rides_output_button("Withdraw From Waiting List", "#", "nycc-withdraw-from-wait-button", '$("input#nycc-withdraw-from-ride").click(); return false;',"");
    }
    else if (!nycc_is_leader($ride) && !arg(2) && ($ride->field_ride_status[0]['value'] == 'Approved') && nycc_ride_is_upcoming($ride)) {
      if (!$no_of_spots || ($available_spots > 0)) {
        //$state = nycc_rides_get_user_ride_counts(strtotime(nycc_get_ride_datetime($ride)), $user_uid) ? "nycc-disabled-button" : "";

        // TODO: check for signups before showing ride button

        // removed condition: ($ride->field_ride_type[0]['value'] == "Cue Sheet Ride") &&
        if (nycc_rides_get_user_ride_counts($ridetime, $user_uid))
          $output .= nycc_rides_output_button("<s>Join Ride</s>", "javascript:alert('Join Ride is disabled. Members may sign up for only one Ride in a four hour period.')", "nycc-disabled-button", "", "");
        else {
          $now = time();
          // disable rides until 10 days prior to event - Part I
        //if (($ridetime - $now) > 10 * 60 * 60 * 24) {
          if (($ride->field_ride_type[0]['value'] != "Club Event") && (($ridetime - $now) > 10 * 60 * 60 * 24) ){
            // do not display message here, do it in nodeapi
            //drupal_set_message("Ride signups are enabled 10 days before the event.");
            $output .= nycc_rides_output_button("<s>Join Ride</s>", "javascript:alert('Join Ride is disabled until 10 days before the event.')", "nycc-disabled-button", "", "");
          } else {
            $output .= nycc_rides_output_button("Join Ride", "#", "nycc-join-withdraw-from-ride-button", '$("input#nycc-join-ride").click(); return false;', "");
          }
        }
      }
      else if ($no_of_spots && !$available_spots && nycc_ride_allows_waitlist($ride) && nycc_ride_is_upcoming($ride)) {
        if (nycc_ride_overlaps_user($user_uid, $ridetime) > 0) {
          $output .= nycc_rides_output_button("<s>Add Me To The Waiting List</s>", "javascript:alert('Add Me To The Waiting List is disabled because you are already on two waiting lists for rides within 4 hours of this ride.')", "nycc-disabled-button", "", "");
        } else {
          $output .= nycc_rides_output_button("Add Me To The Waiting List", "#", "nycc-wait-add-ride-button", '$("input#nycc-join-ride").click(); return false;', "");
        }
      }
    }
  }

  if (!arg(2)) {
    $output .= nycc_rides_output_button("Re-list This Ride", "/node/add/rides/relist/$nid", "nycc-ride-relist", "", "");
  }

  if (arg(2) == "edit") {
    $output .= nycc_rides_output_button("View Ride Details", "/$path", "nycc-ride-view", "", "");
    $action = !nycc_rides_can_approve() && in_array($ride->field_ride_status[0]['value'], array('Approved','Pending','Cancelled', 'Flagged')) ? "Re-submit" : "Submit";

    //if (nycc_rides_can_approve())
    //  $output .= nycc_rides_output_button("$action This Ride", "#", "nycc-ride-save", 'nycc_show_ride_submit_click(); return false;', "");
    //else
      $output .= nycc_rides_output_button("$action This Ride", "#submit-top", "nycc-ride-save", 'nycc_show_ride_submit_confirm();', "");
    $output .= nycc_rides_output_button("Cancel This Ride", "/node/$nid/cancel?destination=node/$nid", "nycc-ride-cancel", '', "");
  }

  if ($ride->field_ride_signups[0]['value'] != "No signups or waiting list") {
    if (!arg(2) && nycc_rides_can_modify_ride($ride)) {
      $output .= nycc_rides_output_button("Roster &amp; Waiver Form", "/printpdf/nycc-riders-roster-pdf/$nid", "nycc-ride-print-roster", "", "");
    }

    if (nycc_rides_count_riders($ride) && nycc_rides_can_modify_ride($ride)) {
      $output .= nycc_rides_output_button("Email Participants", "mailto:". nycc_rides_get_all_rider_emails($ride) ."?subject=$title", "nycc-ride-email-riders", "", "");
    }

    if (nycc_rides_count_waiters($ride) && nycc_rides_can_modify_ride($ride)) {
      $output .= nycc_rides_output_button("Email Waiting List", "mailto:". nycc_rides_get_all_waitlist_emails($ride) ."?subject=$title", "nycc-ride-email-waitlist", "", "");
    }

    if (nycc_rides_count_riders($ride) && nycc_rides_can_modify_ride($ride)) {
      $output .= nycc_rides_output_button("Ride Attendance", "/node/$nid/attend", "nycc-ride-attendance", "", "");
    }
  }

  if (!(arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'rides'))
    $output .= nycc_rides_output_button("Email Leaders", "mailto:". nycc_rides_get_all_leader_emails($ride) ."?subject=$title", "nycc-ride-email-leaders", "", "");

  $output .= '</div>';
  return $output;
}

// TODO: assumes valid ride object, allow nid
function nycc_rides_ride_is_upcoming($ride) {
  //return true;
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  if (!is_object($ride))
    return false;
  $rt = nycc_rides_get_ride_time($ride);
  if ($rt >= time())
    return true;
  return false;
}

function nycc_rides_get_ride_time($ride) {
  return strtotime(nycc_rides_get_ride_time_as_text($ride));
}

function nycc_rides_get_ride_time_as_text($ride) {
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  if (!is_object($ride))
    return null;
  $rdate = substr($ride->field_date_ride_first[0]['value'], 0, 10);
  $rhour = $ride->field_ride_start_time_hour[0]['value'];
  $rmin = $ride->field_ride_start_time_min[0]['value'];
  $rampm = $ride->field_ride_start_time_select[0]['value'];

  if (($rampm == "PM") && ($rhour < 12)) {
    $rhour = intval($rhour) + 12;
  }

  /*
  global $user;
  if ($user->uid == 1)
    drupal_set_message("nycc_ride_time: $rdate $rhour:$rmin:00");
  */
  //dsm(array('strtotime' => strtotime("$rdate $rhour:$rmin:00")));
  return "$rdate $rhour:$rmin:00";
}


function nycc_rides_get_ride_location($ride) {
  if (!$ride || $ride->type != 'rides')
    return "";
 if($ride->field_ride_from[0]['value']==NULL) {
	return $ride->field_ride_from_select[0]['value'];
  } else {
	return $ride->field_ride_from[0]['value'];
  }
}


function nycc_rides_withdraw_from_ride() {
  $nid = $_POST["nid"];
  global $user;
  $user_uid = $user->uid;
  $ride = node_load(array('nid' => $nid));
  if ($ride) {
    $current_riders = $ride->field_ride_current_riders;
    foreach($current_riders as $ndx => $val) {
      foreach($val as $current_rider_uid) {
        if ($current_rider_uid == $user_uid) {
          unset($ride->field_ride_current_riders[$ndx]);
          drupal_set_message("You have withdrawn from this ride.");
          watchdog("rides", "user: %uid (%uname) withdrew from ride: %nid (%rname)", array('%uid'=> $user_uid, '%uname' => $user->name, '%nid'=> $ride->nid, '%rname' => $ride->title), WATCHDOG_INFO);

          // NOTE: moved to nodeapi?
          // check for waitlisters and add first to riders and remove from waitlist
          // if (count($ride->field_ride_waitlist)) {
          //   // $current_waiters = $ride->field_ride_waitlist;
          //   // foreach($current_waiters as $ndx => $val) {
          //   //   if ($ndx) {
          //   //     $ride->field_ride_waitlist[$ndx-1]['uid'] = $ride->field_ride_waitlist[$ndx]['uid'];
          //   //   } else {
          //   //     $waiter = $ride->field_ride_waitlist[$ndx]
          //   //     $ride->field_ride_current_riders[] = $waiter;
          //   //   }
          //   //   $ride->field_ride_waitlist[$ndx]['uid'] = NULL;
          //   // }
          //   $waiter = array_shift($ride->field_ride_waitlist);
          //   //$waiter = array('uid' = > $ride->field_ride_waitlist[0]['uid']);
          //   if (!is_array($ride->field_ride_waitlist)) {
          //     $ride->field_ride_waitlist[] = array("uid" => NULL);
          //   }
          //   drupal_set_message("One person on waitlist moved to participant list.");
          //   $waiternode = user_load($waiter); // only for watchdog
          //   watchdog("rides", "user: %uid (%uname) auto joined from ride waitlist: %nid (%rname)", array('%uid'=> $waiter['uid'], '%uname' => $waiternode->name, '%nid'=> $ride->nid, '%rname' => $ride->title));
          //
          // }
          $ride->field_ride_additional_dates[0]['value'] = "";

          //adding event logging
          nycc_log_action($ride, $user_uid, "Withdraw From Ride");          
                    
          node_save($ride);
          drupal_goto("node/$nid");
        }
      }
    }
    // DONE: not a rider so now do similar for waitlist
    $current_waiters = $ride->field_ride_waitlist;
    foreach($current_waiters as $ndx => $val) {
      foreach($val as $current_waiter_uid) {
        if ($current_waiter_uid == $user_uid) {
          unset($ride->field_ride_waitlist[$ndx]);
          if (!is_array($ride->field_ride_waitlist)) {
            $ride->field_ride_waitlist[] = array("uid" => NULL);
          }
          $ride->field_ride_additional_dates[0]['value'] = "";
          node_save($ride);


           //adding event logging
           nycc_log_action($ride, $user_uid, "Withdraw From Waitlist");     
                     
          drupal_set_message("You have withdrawn from this ride's waiting list.");
          watchdog("rides", "user: %uid (%uname) withdrew from ride waitlist: %nid (%rname)", array('%uid'=> $user_uid, '%uname' => $user->name, '%nid'=> $ride->nid, '%rname' => $ride->title), WATCHDOG_INFO);
          drupal_goto("node/$nid");
        }
      }
    }
  }
  drupal_goto("node/$nid");
  //print nycc_output_ride_buttons($nid);
}

function nycc_rides_ride_allows_waitlist($ride) {
  // TODO: how can we look up the default value for this cck field?
  // NOTE: older rides with no signup set default to true.
  return !$ride->field_ride_signups[0]['value'] || ($ride->field_ride_signups[0]['value'] == "Signups with waiting list");
}

function nycc_ride_join_ride() {
  global $user;
  $user_uid = $user->uid;
  $nid = $_POST["nid"];

  //Checking User Access
  $user_access = in_array("paid member", $user->roles);
  if ($user_access == 1) {
    $joined_flag = 0;
    $ride = node_load(array('nid' => $nid));

    // no longer needed. message already shown on nodeapi view for this type
    // // check if user has already joined a ride on this date
    // if (nycc_rides_get_user_ride_counts($ride->field_date_ride_first[0]['value'], $user_uid)) {
    //   drupal_set_message("You have already joined another ride on this date.");
    //   //drupal_goto("node/$nid");
    // }

    $current_riders = $ride->field_ride_current_riders;
    
    if (is_array($current_riders)) {
		//Checking ride, if it is already joined.
		foreach($current_riders as $val){
		  foreach($val as $current_rider_uid){
			if ($current_rider_uid == $user_uid) {
			 $joined_flag = 1;
			}
		  }
		}
	
		//Checking available spots.
		foreach($current_riders as $val){
		  foreach($val as $current_rider_uid){
			if (is_numeric($current_rider_uid)) {
			  $no_of_riders = $no_of_riders + 1;
			}
		  }
		}
    }
    $no_of_spots = $ride->field_ride_spots[0]['value'];
    $available_spots = $no_of_spots - $no_of_riders;
    if (!$no_of_spots || ($available_spots > 0)) {
      if ($joined_flag == 0) {

return null for redirect to profile
TODO: CHECK THAT RENEWAL DATE IS BEYOND RIDE DATE
        if (!nycc_has_required_profile_info()) {
          drupal_set_message("Please update your Emergency Contact No and Name (required for ride signup).");
          drupal_goto("user/$user_uid/profile/profile/", "destination=node/$nid");
        }

        //joining a ride for logged in user
        if ($ride->field_ride_current_riders[0]['uid'] == NULL) {
          $ride->field_ride_current_riders[0]['uid'] = $user_uid;
        }
        else {
          $ride->field_ride_current_riders[]['uid'] = $user_uid;
        }
        $ride->field_ride_additional_dates[0]['value'] = "";
        node_save($ride);
        
        //adding event logging
        nycc_log_action($ride, $user_uid, "Join A Ride");        
        
        // save waiver release acknowledgement date
        $cp = content_profile_load('profile', $user->uid);
        if ($cp) {
          $cp->field_waiver_last_date[0]['value'] = date('Y-m-d');
          node_save($cp);
        }
        drupal_set_message("You have joined this ride.");
        watchdog("rides", "user: %uid (%uname) joined ride: %nid (%rname)", array('%uid'=> $user->uid, '%uname' => $user->name, '%nid'=> $ride->nid, '%rname' => $ride->title), WATCHDOG_INFO);
      } else
        drupal_set_message("You have already joined this ride.");
    } else {
      if (nycc_ride_allows_waitlist($ride)) {
      // similar to join, but for waitlist
      // return null for redirect to profile
TODO: CHECK THAT RENEWAL DATE IS BEYOND RIDE DATE
        if (!nycc_has_required_profile_info()) {
          drupal_set_message("Please update your Emergency Contact No and Name (required for ride signup).");
          drupal_goto("user/$user_uid/profile/profile/", "destination=node/$nid");
        }

        // check for user already on waiting list
        if (is_array($ride->field_ride_waitlist)) {
          foreach($ride->field_ride_waitlist as $waiter){
            if ($waiter['uid'] == $user_uid) {
              drupal_set_message("You are already on the waitlist");
              drupal_goto("node/$nid");
            }
          }
        }
        
        // adding waitlist a ride for logged in user
        if ($ride->field_ride_waitlist[0]['uid'] == NULL) {     // empty node or user ref list
          $ride->field_ride_waitlist[0]['uid'] = $user_uid;
        }
        else {
          $ride->field_ride_waitlist[]['uid'] = $user_uid;
        }

        // TODO: why is this here?
        $ride->field_ride_additional_dates[0]['value'] = "";

        node_save($ride);
        
		nycc_log_action($ride, $user_uid, "Join A Waitlist");

        // save waiver release acknowledgement date
        $cp = content_profile_load('profile', $user->uid);
        if ($cp) {
          $cp->field_waiver_last_date[0]['value'] = date('Y-m-d');
          node_save($cp);
        }
        drupal_set_message("You have been added to this waiting list for this ride.");
        watchdog("rides", "user: %uid (%uname) added to ride waitlist: %nid (%rname)", array('%uid'=> $user->uid, '%uname' => $user->name, '%nid'=> $ride->nid, '%rname' => $ride->title), WATCHDOG_INFO);

      } else
        drupal_set_message("There are no more available spots.");
    }
  } else {
    drupal_set_message("You must be a paid member to join a ride.");
  //print nycc_output_ride_buttons($nid);
  }
  drupal_goto("node/$nid");
}

function nycc_rides_update_ride_status($ride, $ride_status) {
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));

  if ($ride && in_array($ride_status, nycc_ride_status_options())) {
    $ride->field_ride_status[0]['value'] = $ride_status;
    $ride->field_ride_additional_dates[0]['value'] = "";
    node_save($ride);
  } else {
    drupal_set_message('update failed: invalid node or ride status');
  }
}


// function nycc_update_group_user_status_js() {
//   $id = $_POST["id"];
//   $tid = $_POST["tid"];
//   list($temp, $gid, $uid) = explode("-", $id);
//   // validate, use token ?
//   $sql = "REPLACE INTO {nycc_group_user_status} (gid, uid, tid) VALUES (%d, %d, %d)";
//   $q = db_query($sql, $gid, $uid, $tid);
//   $output_html = "received id: $id, tid: $tid, gid: $gid, uid: $uid";
//   drupal_json(array('status' => TRUE, 'data' => $output_html));
// }


function nycc_rides_update_ride_status_js() {
  $nid = arg(1);
  $ride_status = $_POST["ride-status"];
  $node = node_load(array('nid' => $nid));
  if ($node) {
    if (in_array($ride_status, nycc_ride_status_options())) {
      $node->field_ride_status[0]['value'] = $ride_status;
      $node->field_ride_additional_dates[0]['value'] = "";
      node_save($node);
      $output_html = nycc_ride_status_select_ahah($node, $ride_status);
    } else
      $output_html = "invalid ride status: $ride_status";
  } else
    $output_html = "invalid ride node id: $nid";
  drupal_json(array('status' => TRUE, 'data' => $output_html));
}

function nycc_rides_update_ride_type_js() {
  $nid = arg(1);
  $ride_type = $_POST["ride-type"];
  $node = node_load(array('nid' => $nid));
  if ($node) {
    if (in_array($ride_type, nycc_ride_type_options())) {
      $node->field_ride_type[0]['value'] = $ride_type;
      node_save($node);
      $output_html = nycc_ride_type_select_ahah($node, $ride_type);
    } else
      $output_html = "invalid ride type: $ride_type";
  } else
    $output_html = "invalid ride node id: $nid";
  drupal_json(array('status' => TRUE, 'data' => $output_html));
}

function nycc_rides_ride_status_options() {
  return array("Approved"=>"Approved", "Cancelled"=>"Cancelled", "Pending"=>"Pending", "Flagged" => "Flagged", "Revised" => "Revised", "Submitted"=>"Submitted");
}
function nycc_rides_get_ride_types(){}

function nycc_rides_ride_type_options() {
	if(nycc_rides_can_approve()) {
	   return array( "" => "",
				"Cue Sheet Ride" => "Cue Sheet Ride",
				"Training Ride" => "Training Ride",
				"Club Event" => "Club Event" );
	} else {
	   return array( "" => "",
	   			"Cue Sheet Ride" => "Cue Sheet Ride",
	 			"Training Ride" => "Training Ride");
	}
  //return array("" => "", "Cue Sheet Ride"=>"Cue Sheet Ride", "Training Ride"=>"Training Ride");
}

function nycc_rides_ride_level_options() {
  return array("A"=>"A-ride", "B"=>"B-ride", "C"=>"C-ride");
}

// function nycc_relist_ride($onode, $ride_status = "Submitted") {
//   global $user;
//   $node = clone $onode;
//   $title = $node->title;
//   //$ride_date_db = nycc_rides_get_date($date);
//
//   $node->nid = NULL;
//   $node->vid = NULL;
//   $node->field_ride_status[0]['value'] = $ride_status;
//
//   $node->tnid = NULL;
//   $node->created = NULL;
//   $node->book['mlid'] = NULL;
//   $node->path = NULL;
//   $node->files = array();
//
//   $node->field_date_ride_first[0]['value'] = "";  // $ride_date_db;
//   $node->field_ride_additional_dates = NULL;
//   $node->field_ride_current_riders = array();
//   $node->field_ride_leaders = array(array('uid' => $user->uid));
//   $node->field_ride_waitlist = array();
//
//   node_save($node);
//
//   $nid = $node->nid;
//   drupal_set_message("Please enter a new date before saving.");
//   drupal_goto("node/". $nid . "/edit");
// }

function nycc_rides_clone_ride($onode, $date, $ride_status = "Submitted") {
  if (!drupal_strlen(trim($date)))
    return false;
  $node = clone $onode;
  $title = $node->title;
  $ride_date_db = nycc_rides_get_date($date);
  if (nycc_ride_exists($title, $ride_date_db)) {
    //drupal_set_message("Ride with title $title already exists for $date");
    return false;
  }
  $node->nid = NULL;
  $node->vid = NULL;
  $node->field_ride_status[0]['value'] = $ride_status;

  $node->tnid = NULL;
  $node->created = NULL;
  $node->book['mlid'] = NULL;
  $node->path = NULL;
  $node->files = array();

  $node->field_date_ride_first[0]['value'] = $ride_date_db;
  $node->field_ride_additional_dates[0]['value'] = "";
  $node->field_ride_current_riders = array();
  $node->field_ride_waitlist = array();
  node_save($node);
  $nid = $node->nid;
  // note: messaging will not work as expected if called via ajax
  drupal_set_message("Recurring ride for <a href='/node/$nid' title='View recurring ride in another tab or window...' target='_blank'>$title</a> created with date $date");
  return true;
}

// print for ajax return
function nycc_rides_ride_participants_js($nid = null) {
  print nycc_rides_output_ride_participants($nid);
}

function nycc_rides_output_ride_participants($nid = null) {
  //global $theme_path;
  if (is_object($nid)) {
    $ride = $nid;
    $nid = $ride->nid;
  }
  else if (!$nid)
    $nid = ($_POST['nid'] > 0) ? $_POST['nid'] : ((arg(2) > 0) ? arg(2) : arg(1));
  if (is_numeric($nid) && ($nid > 0)) {
    if (!$ride)
      $ride = node_load(array('nid' => $nid));
    if ($ride) {
      if ($ride->field_ride_signups[0]['value'] == "No signups or waiting list")
        return "";
      $current_riders = $ride->field_ride_current_riders;
      $cnt = 0;
      if (is_array($current_riders) && count($current_riders)) {
        $output = "<ul class='nycc-ride-particpants-list'>";
        foreach ($current_riders as $val){
          if (is_array($val)) {
            foreach ($val as $current_rider_uid){
              if (is_numeric($current_rider_uid)) {
                $cnt++;
                $cp = content_profile_load('profile', $current_rider_uid);
                $output .= "<li><a href='/user/$current_rider_uid' target='_blank'>". $cp->field_first_name[0]['value'] ." ". $cp->field_last_name[0]['value'] ."</a></li>";
              }
            }
          }
        }
        $output .= "</ul>";
      }
      if (!$cnt)
        $output = "<ul class='nycc-empty-ride-particpants-list'><li>Be the first to join!</li></ul>";
    }
  }
  return $output;
}

// print for ajax return
function nycc_rides_ride_waitlist_js($nid = null) {
  print nycc_rides_output_ride_waitlist($nid);
}

function nycc_rides_output_ride_waitlist($nid = null) {
  //global $theme_path;
  if (is_object($nid)) {
    $ride = $nid;
    $nid = $ride->nid;
  }
  else if (!$nid)
    $nid = ($_POST['nid'] > 0) ? $_POST['nid'] : ((arg(2) > 0) ? arg(2) : arg(1));
  if (is_numeric($nid) && ($nid > 0)) {
    if (!$ride)
      $ride = node_load(array('nid' => $nid));
    if ($ride) {
      if ($ride->field_ride_signups[0]['value'] == "No signups or waiting list")
        return "";
      $current_waiters = $ride->field_ride_waitlist;
      $cnt = 0;
      if (is_array($current_waiters) && count($current_waiters)) {
        $output = "<ul class='nycc-ride-waitlist'>";
        foreach ($current_waiters as $val){
          if (is_array($val)) {
            foreach ($val as $current_waiter_uid){
              if (is_numeric($current_waiter_uid)) {
                $cnt++;
                $cp = content_profile_load('profile', $current_waiter_uid);
                $output .= "<li>". $cp->field_first_name[0]['value'] ." ". $cp->field_last_name[0]['value'] ."</li>";
              }
            }
          }
        }
        $output .= "</ul>";
      }
      if (!$cnt)
        $output = "<ul class='nycc-empty-ride-waitlist'><li></li></ul>";
    }
  }
  return $output;
}



/**
 * Implementation of hook_block().
 */
function nycc_rides_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('NYCC Ride Participants');
      $blocks[0]['cache'] = BLOCK_NO_CACHE;
      $blocks[1]['info'] = t('NYCC Ride Waiting List');
      $blocks[1]['cache'] = BLOCK_NO_CACHE;
      $blocks[2]['info'] = t('Group Links');
      $blocks[2]['cache'] = BLOCK_CACHE_PER_PAGE;
      $blocks[3]['info'] = t('Group Ride Withdrawals');
      $blocks[3]['cache'] = BLOCK_CACHE_PER_PAGE;
      $blocks[4]['info'] = t('Ride Coordinators Email');
      $blocks[4]['cache'] = BLOCK_CACHE_PER_PAGE;
      return $blocks;
    case 'configure':
      return $form;
    case 'save':
      break;
    case 'view':
      if ($delta == 0) {
        $block['content'] = nycc_rides_output_ride_participants();
        $block['subject'] = drupal_strlen($block['content']) ? t('Ride Participants') : "";
      }
      if ($delta == 1) {
        $block['content'] = nycc_rides_output_ride_waitlist();
        $block['subject'] = drupal_strlen($block['content']) ? t('Ride Waiting List') : "";
      }
//       if ($delta == 2) {
//         $block['subject'] = t('Group Links');
//         $block['content'] = nycc_output_group_links_block();
//       }
//       if ($delta == 3) {
//         $block['subject'] = t('Group Ride Withdrawals');
//         $block['content'] = nycc_output_group_ride_withdrawals_block();
//       }
      if ($delta == 4) {
        $block['subject'] = t('Ride Coordinators Email');
        $block['content'] = nycc_rides_output_ride_coordinators_email_block();
      }
      return $block;
  }
}

// used with printpdf
// todo: allow pass of $node to avoid node_load
function nycc_rides_output_riders_roster_pdf($nid = null) {
  //global $theme_path;
  if (!$nid)
    $nid = ($_POST['nid'] > 0) ? $_POST['nid'] : ((arg(2) > 0) ? arg(2) : arg(1));
  if (is_numeric($nid) && ($nid > 0)) {
    $ride = node_load(array('nid' => $nid));
    if ($ride) {
      drupal_set_title($ride->title ."-". substr($ride->field_date_ride_first[0]['value'], 0, 10));
      $output .= views_embed_view('rides_detail_on_riders_list', 'block_1', $nid, $nid);
      // display waiver
      $waiver = node_load(array('nid' => '45438'));
      if ($waiver)
        $output .= $waiver->body;
      // display ride participants
      $leaders = nycc_rides_refs2ids(nycc_rides_noderefs2userrefs($ride->field_ride_leaders));
      $riders = nycc_rides_refs2ids($ride->field_ride_current_riders);
      $output .= views_embed_view('ride_participants', 'block_2', implode("+", array_merge($leaders, $riders)));
      $waiters = nycc_rides_refs2ids($ride->field_ride_waitlist);
      $output .= views_embed_view('ride_participants', 'block_3', implode("+", $waiters));
      //$output .= var_export(implode("+", $waiters),1);
    }
  }
  return $output;
}

function nycc_rides_ride_has_changed($ride) {
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  $rev = nycc_rides_last_approved_revision($ride);
  // title, description, spots, level, distance, speed, date, start time, start time minute, start time, select, from, from_select, leaders?

  if ($ride->title != $rev->title)
    return true;
  if ($ride->field_ride_description[0]['value'] != $rev->field_ride_description[0]['value'])
    return true;
  if ($ride->field_ride_spots[0]['value'] != $rev->field_ride_spots[0]['value'])
    return true;
  if ($ride->field_ride_select_level[0]['value'] != $rev->field_ride_select_level[0]['value'])
    return true;
  if ($ride->field_ride_distance_in_miles[0]['value'] != $rev->field_ride_distance_in_miles[0]['value'])
    return true;
  if ($ride->field_ride_speed[0]['value'] != $rev->field_ride_speed[0]['value'])
    return true;
  if ($ride->field_date_ride_first[0]['value'] != $rev->field_date_ride_first[0]['value'])
    return true;
  if ($ride->field_ride_from[0]['value'] != $rev->field_ride_from[0]['value'])
    return true;
  if ($ride->field_ride_from_select[0]['value'] != $rev->field_ride_from_select[0]['value'])
    return true;
  if ($ride->field_ride_start_time_hour[0]['value'] != $rev->field_ride_start_time_hour[0]['value'])
    return true;
  if ($ride->field_ride_start_time_min[0]['value'] != $rev->field_ride_start_time_min[0]['value'])
    return true;
  if ($ride->field_ride_start_time_select[0]['value'] != $rev->field_ride_start_time_select[0]['value'])
    return true;
  return false;
}

function nycc_rides_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  switch ($op) {
    case 'insert':
    case 'update':
      if ($node->type == 'rides') {

        $ad = $node->field_ride_additional_dates[0]['value'];
        if (drupal_strlen($ad)) {
          $ads = explode( ",", $ad);
          if (is_array($ads)) {
            foreach ($ads as $d) {
              watchdog('nycc_nodeapi', "about to clone ride to date $d", array(), WATCHDOG_INFO);
              nycc_rides_clone_ride($node, $d);
            }
          }
          // TODO: clear additional dates field so that it is not copied?
        }
        if (in_array($node->field_ride_status[0]['value'], array('Submitted', 'Revised')))
          drupal_set_message(t("Please Note: If your ride includes the use of a train you must also complete a <a href=\"https://docs.google.com/forms/d/1-KMVUUHflXyxes6ZFKPqTK54-FKvQ9V2-ympcYZ8b0w/viewform\" target=\"_blank\">Train Request</a> here." ));

        if (in_array($node->field_ride_status[0]['value'], array('Submitted', 'Revised')) && !nycc_rides_can_approve())
          drupal_set_message(t("Please Note: Approval may take 24 to 48 hours (usually, we get to it sooner)."));
      }
      break;
    case 'prepare':

      if ((arg(3) == "relist") && (arg(4) > 0)) {
        $onode = node_load(array('nid' => arg(4)));
        if ($onode) {
          $node->title = $onode->title;
          $node->field_ride_select_level[0]['value'] = $onode->field_ride_select_level[0]['value'];
          $node->field_ride_distance_in_miles[0]['value'] = $onode->field_ride_distance_in_miles[0]['value'];
          $node->field_ride_start_time_hour[0]['value'] = $onode->field_ride_start_time_hour[0]['value'];
          $node->field_ride_start_time_min[0]['value'] = $onode->field_ride_start_time_min[0]['value'];
          $node->field_ride_start_time_select[0]['value'] = $onode->field_ride_start_time_select[0]['value'];
          $node->field_ride_from[0]['value'] = $onode->field_ride_from[0]['value'];
          $node->field_ride_from_select[0]['value'] = $onode->field_ride_from_select[0]['value'];
          $node->field_ride_speed[0]['value'] = $onode->field_ride_speed[0]['value'];
          $node->field_ride_description[0]['value'] = $onode->field_ride_description[0]['value'];
          $node->field_ride_spots[0]['value'] = $onode->field_ride_spots[0]['value'];
          $node->field_ride_type[0]['value'] = $onode->field_ride_type[0]['value'];
          $node->field_ride_signups[0]['value'] = $onode->field_ride_signups[0]['value'];
          $node->field_ride_attachments = $onode->field_ride_attachments;
          $node->field_ride_image = $onode->field_ride_image;
          $node->field_ride_cue_sheet = $onode->field_ride_cue_sheet;
          $node->field_ride_status[0]['value'] = "Submitted";
        }
        drupal_set_message("This is a re-listing of ". $node->title);
        drupal_set_message("You are set as the leader for this ride.");
        drupal_set_message("Please be sure to select a new date for the ride.");
      }

      //if ($node->type == 'rides') {
        //$node->field_ride_timestamp[0]['value'] = date("m-d-Y h:m:s");// $timestamp;
        //$node->field_ride_dow[0]['value'] = date("l", $timestamp);
      //}

      if ($node->type == 'rides' && arg(2) == 'edit') {
        $node->field_ride_additional_dates[0]['value'] = "";
		if (!nycc_rides_can_approve()) {
			drupal_set_message("<b>Please Note:</b> If you modify key fields on this ride it will be taken offline until the Ride Coordinator has had a chance to review the changes.");
			drupal_set_message("While we make every effort to approve it  a timely manner, It could take up to 48 hours for the change to be approved.");
			drupal_set_message("If you must make changes to the ride within 48 hours of the ride start, we'd suggest that your reach out to <a href='mailto:" .
						 $node->field_ride_select_level[0]['value'] . "-rides@nycc.org?subject=Urgent: I need to make changes to a ride!'>" .  $node->field_ride_select_level[0]['value'] . 
						 "-rides@nycc.org</a> to confirm that they can approve in a timely manner <b>before you make the changes</b>");
		}
      } // ride edit
// 
//       if ($node->type == 'rides' && arg(0) == 'node' && arg(1) == 'add') {
//         // preload group members if group ride and add riders checkbox is checked
//         $gp = og_determine_context();
//         if ($gp && $gp->field_group_add_riders[0]['value'] != "false") {
//           $sql = og_list_users_sql();
//           $result = db_query($sql, $gp->nid);
//           $cnt = 0;
//           while ($row = db_fetch_object($result)) {
//             $acct = user_load($row->uid);// check that user is active group member and not a captain/admin
//             if ($acct && is_array($acct->og_groups[$gp->nid]) && $acct->og_groups[$gp->nid]['is_active']) {
//               // check that user is not already in list if this gets moved to an edit/approval position
//               if ($acct->og_groups[$gp->nid]['is_admin']) {
//                 $cp = content_profile_load('profile', $acct->uid);
//                 $node->field_ride_leaders[] = array("nid" => $cp->nid);
//               } else {
//                 $node->field_ride_current_riders[] = array("uid" => $row->uid);
//                 $cnt++;
//               }
//             }
//           } // while
//            $node->field_ride_spots[0]['value'] = $cnt;
//         } // if group
//         //dsm($node);
//       } // ride add


      break;
    case 'presave':
      if ($node->type == 'rides') {

        // set dow and timestamp
        $node->field_ride_timestamp[0]['value'] = nycc_rides_get_ride_time_as_text($node);
        $node->field_ride_dow[0]['value'] = date("l", nycc_rides_get_ride_time($node));

        // treat 0 as blank
        if ($node->field_ride_spots[0]['value'] === 0)
          $node->field_ride_spots[0]['value'] = "";
		if (arg(0) != "nycc" && arg(0) != "inbound") // if edit is not coming from inbound email processor
		{
	    	if (!nycc_rides_can_approve() && in_array($node->field_ride_status[0]['value'] , array('Approved', 'Cancelled', 'Pending', 'Flagged')) && nycc_ride_has_changed($node))
	        {
    	    	$node->field_ride_status[0]['value'] = 'Revised';
    	    }
		}
        // remove riders from waitlist
        $current_riders = $node->field_ride_current_riders;
        $waiters = $node->field_ride_waitlist;
        if (is_array($current_riders) && is_array($waiters)) {
          foreach($current_riders as $rider) {
            // riders and waiters are userrefs
            //watchdog('test', "scanning waiters for rider ". $rider['uid']);
            foreach($waiters as $ndx => $waiter) {
              //watchdog('test', "scanning waiter[$ndx]: ". $waiter['uid']);
              if ($rider['uid'] == $waiter['uid']) {
                unset($node->field_ride_waitlist[$ndx]);
                watchdog("rides", "waiter: %uid removed from waitlist: %nid (%rname)", array('%uid'=> $waiter['uid'], '%nid'=> $node->nid, '%rname' => $node->title), WATCHDOG_INFO);
              }  //if
            } // foreach waiter
          } // foreach rider
        } // if currentriders and waiters

        // remove leaders from participant list
        $leaders = $node->field_ride_leaders;
        $current_riders = $node->field_ride_current_riders;
        if (is_array($current_riders) && is_array($leaders)) {
          foreach($leaders as $leader) {
            // leaders are noderef, but riders are userrefs
            //watchdog('test', "checking leader ". $leader['nid']);
            // note that leader array also has _error_element in it, so don't pass directly
            $leader_profile_node = node_load($leader['nid']);
            if ($leader_profile_node) {
              //watchdog('test', "scanning riders for leader ". $leader['nid']);
              foreach($current_riders as $ndx => $current_rider) {
                //watchdog('test', "scanning rider[$ndx]: ". $current_rider['uid']);
                if ($current_rider['uid'] == $leader_profile_node->uid) {
                  unset($node->field_ride_current_riders[$ndx]);
                  drupal_set_message("Leader ". $leader_profile_node->field_first_name[0]['value'] ." ". $leader_profile_node->field_last_name[0]['value'] ." automatically removed from participants list.");
                  watchdog("rides", "leader: %uid (%uname) removed from particpants list: %nid (%rname)", array('%uid'=> $current_rider['uid'], '%nid'=> $node->nid, '%rname' => $node->title), WATCHDOG_INFO);
                }  //if
              } // foreach current_rider
            } // if leader_profile_node
          } // foreach leader
        } // if currentriders and leaders

        // todo: change cancelled to submitted?

        // TODO: send emails to all new riders
        $numriders = nycc_rides_count_riders($node);
        $numwaiters = nycc_rides_count_waiters($node);
        $numspots = $node->field_ride_spots[0]['value'];
        //if (!($numspots > 0))
        //  $node->field_ride_signups[0]['value'] = "No signups or waiting list";
        if (nycc_rides_ride_allows_waitlist($node) && ($numspots > $numriders) && ($numwaiters > 0)) {
          $numnewspots = min($numspots - $numriders, $numwaiters);
          for ($i = 0; $i < $numnewspots; $i++) {
            $waiter = array_shift($node->field_ride_waitlist);
            $node->field_ride_current_riders[] = array("uid" => $waiter['uid']);
            //   drupal_set_message("One person on waitlist moved to participant list.");
            $waiternode = user_load($waiter['uid']); // only for watchdog
            watchdog("rides", "user: %uid (%uname) auto joined from ride waitlist: %nid (%rname)", array('%uid'=> $waiter['uid'], '%uname' => $waiternode->name, '%nid'=> $node->nid, '%rname' => $node->title), WATCHDOG_INFO);
            
           //event logging
            nycc_rides_log_action($node, $waiter['uid'], "Auto-Join From Waitlist");
          }
          drupal_set_message($numnewspots ." ". ($numnewspots == 1 ? "person" : "people") ." on waitlist moved to participant list.");
        }
      }


    case 'validate':  // $a3 is $form in this case

      // TODO: check for dates in future for non-approved rides

      // check for spots > riders count
      $numriders = nycc_rides_count_riders($node);
      $numspots = $node->field_ride_spots[0]['value'];
      $numwaiters = nycc_rides_count_waiters($node);
      if ($numspots > 0) {
        if ($numspots < $numriders)
          form_set_error('field_ride_spots', "The number of spots can not be less than the number of currently signed up riders (". $numriders .").");
        if ($node->field_ride_signups[0]['value'] == "No signups or waiting list")
          form_set_error("field_ride_spots", "Max. Participants must be blank when Sign-ups is 'No signups or waiting list'");
        if (($numwaiters > 0) && ($node->field_ride_signups[0]['value'] != "Signups with waiting list"))
          form_set_error("field_ride_signups", "There are people on the waiting list; please select 'Signups with waiting list' or increase the number of Max. Participants.");

      } else {
        //if  ($numriders > 0)
        // TODO: warn that this will delete rider and wait lists, plus send emails?
        //if ($node->field_ride_signups[0]['value'] == "Signups with waiting list")
        //  form_set_error("field_ride_spots", "Max. Participants must not be blank or 0 when Sign-ups is set to 'Signups with waiting list'");
      }
      //var_dump(array($a3['#redirect'], $a3['#validate'], $a3['#submit'], ));
      if ($node->type == 'rides') {
        $ad = $node->field_ride_additional_dates[0]['value'];
        if (drupal_strlen($ad)) {
          $ads = explode( ",", $ad);
          if (is_array($ads)) {
            foreach ($ads as $d) {
              if (!nycc_rides_get_date($d) && drupal_strlen(trim($d)))
                form_set_error('additional_dates', "Invalid additional date: $d");
            }
          }
        }
      }
      break;
    case 'view':
      if ($node->type == 'rides') {
        $uid = $user->uid;
        // check if user has already joined a ride on this date +/- 4 hours
        // removed condition: $node->field_ride_type[0]['value'] == "Cue Sheet Ride" &&
        if (!nycc_rides_is_rider($node, $user) && nycc_rides_get_user_ride_counts(strtotime(nycc_rides_get_ride_datetime($node)), $uid)) {
          $rtitle = $node->title;
          drupal_set_message("Alert: You are signed-up for a conflicting ride. NYCC allows members to sign up for only one ride during the same 4-hour time slot. To join $rtitle, you need drop the conflicting ride <a href='/user/$uid/myrides' target='blank'>see all your rides here</a>.");
          //drupal_goto("node/$nid");
        }
        $node->content['field_ride_spots']['field']['#title'] = t("Remaining/Spots");
        $numwaiters = nycc_rides_count_waiters($node);
        $numriders = nycc_rides_count_riders($node->field_ride_current_riders);
        $node->content['field_ride_spots']['field']['items'][0]['#item']['value'] = 
        		($node->field_ride_spots[0]['value'] ? $node->field_ride_spots[0]['value'] - $numriders .t(" of "). 
        		$node->field_ride_spots[0]['value'] : (t("Unlimited") . 
        		(($node->field_ride_signups[0]['value'] == "No signups or waiting list") ? "/No Sign-ups" : "/". 
        		$numriders))) . ((($node->field_ride_signups[0]['value'] != "No signups or waiting list") 
        		&& $numwaiters) ? " (". $numwaiters ." waiting)":"");
        // treat null rides signup as allowing waiting lists
        // TODO: how can we look up the default value for this cck field?
        if (!$node->field_ride_signups[0]['value'])
          $ride->field_ride_signups[0]['value'] == "Signups with waiting list";
        if (!nycc_rides_ride_is_upcoming($node) && (arg(0) == 'node'))
          drupal_set_message("NOTE: This ride has already taken place.");

        // disable rides until 10 days prior to event - part II
        $ridetime = strtotime(nycc_rides_get_ride_datetime($node));
        $now = time();

        // TODO: why does this message appear during manual cron run? 
        // add user check for now in case it is happening during all cron runs

        
//        if ($user->uid && (($ridetime - $now) > 10 * 60 * 60 * 24)) {
        if ($user->uid && ($node->field_ride_type[0]['value'] != "Club Event") && (($ridetime - $now) > 10 * 60 * 60 * 24)) {
          drupal_set_message("PLEASE NOTE: Ride signups are enabled 10 days before the event (". date('l, F jS, Y \@ h:i A', $ridetime - 10 * 60 * 60 * 24) .").");
        }

        // check for more than two overlapping waitlists - part II
        if (nycc_rides_ride_overlaps_user($uid, $ridetime) > 0) {
          drupal_set_message("PLEASE NOTE: Add Me To The Waiting List is disabled because you are already on two waiting lists for rides within 4 hours of this ride.  You can view your waitlist signups in your <a href='/user/$uid/mywaitlists'>profile</a>");
        }

        /*
        if ($user->uid == 1)
          drupal_set_message("ridetime: ". nycc_rides_get_ride_time($node) .", upcoming: ". nycc_ride_is_upcoming($node) .", current time:". time() . ", ride: ". date("c", nycc_rides_get_ride_time($node)) .", tz: ". date_default_timezone_get());
        */
      }
      break;
  }
}



function nycc_rides_ride_coordinators() {
  $coordinators = array();
  $sql = 'SELECT c.field_ride_coordinator_value AS level, n.title as name, p.field_phone_value as phone, u.mail, u.uid FROM {content_field_ride_coordinator} c, {content_type_profile} p, {node} n, {users} u WHERE n.nid=c.nid AND p.nid=n.nid AND u.uid=n.uid AND field_ride_coordinator_value IS NOT NULL ORDER BY 1';
  $results = db_query($sql);
  while ($coordinator = db_fetch_object($results)) {
    $coordinator->level = strtoupper(substr($coordinator->level,0,1)); // lcfirst($coordinator->level);
    $coordinators[] = $coordinator;
  }
  return $coordinators;
}

function nycc_rides_output_ride_coordinators() {
  $output = "<div class='ride-coordinators'>";
  $output .= "<label>". t("Ride Coordinators:") ."</label>";
  $coordinators = nycc_ride_coordinators();
  foreach ($coordinators as $coordinator) {
    if (strtoupper($coordinator->level) == "A")
      $output .= "<div class='coordinator-a-rides'>A-rides: <a href='/user/" . $coordinator->uid . "' title='View profile in another tab or window...' target=_blank'>" . $coordinator->name . "</a>,<br/>" . $coordinator->phone . ",<br/><a title='Send email...' href=mailto:a-rides@nycc.org>a-rides@nycc.org</a></br></br></div>";

    if (strtoupper($coordinator->level) == "B")
      $output .= "<div class='coordinator-b-rides'>B-rides: <a href='/user/" . $coordinator->uid . "' title='View profile in another tab or window...' target=_blank'>" . $coordinator->name . "</a>,<br/>" . $coordinator->phone . ",<br/><a title='Send email...' href=mailto:b-rides@nycc.org>b-rides@nycc.org</a></br></br></div>";

    if (strtoupper($coordinator->level) == "C")
      $output .= "<div class='coordinator-c-rides'>C-rides: <a href='/user/" . $coordinator->uid . "' title='View profile in another tab or window...' target=_blank'>" . $coordinator->name . "</a>,<br/>" . $coordinator->phone . ",<br/><a title='Send email...' href=mailto:c-rides@nycc.org>c-rides@nycc.org</a></div>";
  }
  $output .= "</div>";
  return $output;
}

function nycc_rides_output_ride_classification() {
  $output = "<div class='ride-classification'>";
  $output .= "<ul>";
  $output .= "  <li>A = Fast, with paceline skills required</li>";
  $output .= "  <li>B = Moderate</li>";
  $output .= "  <li>C = Gentle (a good introduction to the Club)</li>";
  $output .= "</ul>";
  $output .= "</div>";
  return $output;
}

// called from theme override of theme_node_form
function nycc_rides_output_group_node_form($form, $op = 'add') {
  //dsm($form);
  //$output .= "<h3 style='color:red'>Group form - Pleae do not use yet</h3>";
  $output .= drupal_render($form['title']);
  $output .= drupal_render($form['og_description']);
  $output .= drupal_render($form['body_field']);
  $output .= drupal_render($form['field_group_parent']);
  $output .= drupal_render($form['field_group_add_signups']);
  $output .= drupal_render($form['field_group_logo']);
  $output .= drupal_render($form['field_group_captain']);
  $output .= drupal_render($form['field_group_add_riders']);
  //$output .= drupal_render($form['field_group_forum']);
  //$output .= drupal_render($form['field_group_forum_private']);


  $buttons = drupal_render($form['buttons']);
  $output .= $buttons;

  $output .= "<hr/>";

  // hide the rest for now
  $output .= "<div class='hide'>";
  $output .= drupal_render($form);
  //$output .= $buttons;
  $output .= "</div>";
  return $output;
}

// called from theme override of theme_node_form
function nycc_rides_output_ride_node_form($form, $op = 'add') {
  //dsm($form);
  $status = nycc_rides_get_ride_status($form['#node']);

  if ($op == 'edit' && ($status == 'Approved'))
    $output .= drupal_render($form['revision_information']);

  $output .= "<h3>Step 1. Schedule ride dates:</h3>";

  //$output .= drupal_render($form['dp-normal-1']);

  //$output .= drupal_render($form['field_date_ride_first']);

  $output .= drupal_render($form['field_ride_additional_dates']);
  $output .= drupal_render($form['choose_calendar_target']);
  $output .= drupal_render($form['nycc_rides_datepicker']);
  $output .= drupal_render($form['existing_rides_wrapper']);

  //$output .= "<input id='ride-add-recurring' type='button'value='Clone This Ride ▼'/>";
  //$output .= "<div id='ride-add-recurring-fields'>";
  //$output .= drupal_render($form['additional_dates']);
  //$output .= "</div>";

  $output .= "<h3>" .t("Step 2. Specify ride details:"). "</h3>";

  $output .= drupal_render($form['field_ride_status']);
  $output .= drupal_render($form['field_ride_type']);
  $output .= drupal_render($form['field_ride_select_level']);
  $output .= drupal_render($form['title']);
  $output .= drupal_render($form['field_ride_speed']);
  $output .= drupal_render($form['field_ride_distance_in_miles']);
  $output .= drupal_render($form['field_ride_signups']);
  $form['field_ride_spots']['#title'] = 'Max. Participants';
  $form['field_ride_spots'][0]['#title'] = 'Max. Participants';
  $form['field_ride_spots'][0]['value']['#title'] = 'Max. Participants';
  $output .= drupal_render($form['field_ride_spots']);
  $output .= drupal_render($form['field_ride_start_time_hour']);
  $form['field_ride_start_time_min']['#title'] = "";
  $form['field_ride_start_time_min']['value']['#title'] = "";
  $output .= drupal_render($form['field_ride_start_time_min']);
  $form['field_ride_start_time_select']['#title'] = "";
  $form['field_ride_start_time_select']['value']['#title'] = "";
  $output .= drupal_render($form['field_ride_start_time_select']);
  $output .= drupal_render($form['field_ride_from_select']);
  $output .= drupal_render($form['field_ride_from']);
  $form['field_ride_description']['#cols'] = 50;
  $output .= drupal_render($form['field_ride_description']);

  $output .= "<h3>" .t("Step 3. Select ride leaders:"). "</h3>";
  //$output .= "<small>(Start typing last name & wait a second for the system to query our database)</small>";
  $form['field_ride_leaders']['field_ride_leaders_add_more']['#value'] = t("Add another ride leader");
  $output .= drupal_render($form['field_ride_leaders']);
  if ($op == 'add') {
    unset($form['field_ride_current_riders']);
    unset($form['field_ride_waitlist']);
  } else {
    $form['field_ride_current_riders']['field_ride_current_riders_add_more']['#value'] = t('Add another rider');
    $output .= drupal_render($form['field_ride_current_riders']);
    $output .= drupal_render($form['field_ride_waitlist']);
  }

  $output .= "<h3>" .t("Step 4. Upload some images or file attachments (optional):"). "</h3>";
  $form['field_ride_image']['field_ride_image_add_more']['#value'] = t('Add another image');
  $output .= drupal_render($form['field_ride_image']);

  $form['field_ride_attachments']['field_ride_attachments_add_more']['#value'] = t('Attach another file');
  $output .= drupal_render($form['field_ride_attachments']);

  $output .= "<h3>" .t("Step 5. Reference a ride library cue-sheet (optional):"). "</h3>";
  $output .= drupal_render($form['field_ride_cue_sheet']);

  $action = !nycc_rides_can_approve() && in_array($status, array('Approved','Pending','Cancelled', 'Flagged')) ? "Re-submit" : "Submit";

  //if (nycc_rides_can_approve() || ($op=='add'))
  //if ($op == 'add')
    //$output .= nycc_rides_output_button("$action This Ride", "#", "nycc-ride-save nycc-ride-save-bottom", 'nycc_show_ride_submit_click(); return false;', "");
  //else
    $output .= nycc_rides_output_button("$action This Ride", "#submit-top", "nycc-ride-save nycc-ride-save-bottom", 'nycc_rides_show_ride_submit_confirm();', "");

  $output .= "<a name='submit-top'></a>";

  //if (!nycc_rides_can_approve() && in_array($status, array('Approved', 'Pending', 'Cancelled', 'Flagged'))) {
  //if ($op != 'add')
    $output .= drupal_render($form['submit_instructions']);
    $output .= drupal_render($form['buttons']['submit']);
    $output .= drupal_render($form['submit_cancel']);
  //}

  $buttons = drupal_render($form['buttons']);

  // hide the rest for now
  $output .= "<div class='hide'>";
  $output .= drupal_render($form);
  $output .= $buttons;
  $output .= "</div>";

  return $output;
}

function nycc_rides_existing_rides_js() {
  $ride_date = $_POST["date"];
  print nycc_rides_output_existing_rides($ride_date);
}

function nycc_rides_output_existing_rides($ride_date) {
  $found = false;
  $ride_date_ui = nycc_rides_get_date($ride_date, "F d, Y");
  $ride_date_db = nycc_rides_get_date($ride_date);
  $output = "<div class='existing-rides'>";
  $output .= "<h3>" .t("Rides planned for"). " $ride_date_ui ($ride_date_db)</h3>";
  $output .= "<ul>";
  $q = db_query("SELECT r.nid, n.title, r.field_ride_select_level_value AS level FROM {content_type_rides} r, {node} n WHERE n.nid=r.nid AND n.vid=r.vid AND n.status <> 0 AND field_date_ride_first_value LIKE '%s%%'", $ride_date_db);
  while($row = db_fetch_array($q)) {
    $found = true;
    $output .= "<li class='ride'><a target='_blank' title='View ride details...' href=\"/node/". $row['nid'] ."\"> " . $row['title'] . "</a> - Level: " . $row['level'] . "</li>";
  }
  if (!$found)
    $output .= "<li class='no-rides'>" .t("No other rides found for this date."). "</li>";
  $output .= "</ul>";
  $output .= "</div>";
  return $output;
}

// only works for node types
// function nycc_access($op, $node, $account) {
//   // allow any leader to edit rides
//   if ($op == 'update' && $node->type == 'rides') {
//     return nycc_rides_can_modify_ride($node, $account);
//   }
// }

function nycc_rides_is_leader($ridenode, $account = null) {
  global $user;
  if (!$account)
    $account = $user;
  if ($ridenode && $ridenode->field_ride_leaders && is_array($ridenode->field_ride_leaders)) {
    $cp = content_profile_load('profile', $account->uid);
    foreach($ridenode->field_ride_leaders as $leader) {
      if ($cp->nid == $leader['nid'])
        return true;
    }
  }
  return false;
}

function nycc_rides_is_rider($ridenode, $account = null) {
  global $user;
  if (!$account)
    $account = $user;
  if ($ridenode && $ridenode->field_ride_current_riders && is_array($ridenode->field_ride_current_riders)) {
    foreach($ridenode->field_ride_current_riders as $item) {
      if ($account->uid == $item['uid'])
        return true;
    }
  }
  return false;
}


function nycc_rides_is_waiting($ridenode, $account = null) {
  global $user;
  if (!$account)
    $account = $user;
  if ($ridenode && $ridenode->field_ride_waitlist && is_array($ridenode->field_ride_waitlist)) {
    foreach($ridenode->field_ride_waitlist as $item) {
      if ($account->uid == $item['uid'])
        return true;
    }
  }
  return false;
}

// todo: consolidate these two functions, passing the user ref field
// todo: replace with sql query instead of node_load
function nycc_rides_count_attendees($data) {
  if (is_numeric($data)) {
    $node = node_load(array("nid" => $data));
    $attendees = $node->field_ride_attendees;
  } else if (is_array($data))
    $attendees = $data;
  else if (is_object($data))
    $attendees = $data->field_ride_attendees;
  else
    return 0;
  $no_of_attendees = 0;
  if (is_array($attendees)) {
    foreach($attendees as $val) {
      if (is_numeric($val['uid']))
        $no_of_attendees = $no_of_attendees + 1;
      //foreach($val as $attendee_uid){
      //  if (is_numeric($attendee_uid))
      //    $no_of_attendees = $no_of_attendees + 1;
      //}
    }
  }
  return $no_of_attendees;
}

// replace with sql query instead of node_load
function nycc_rides_count_riders($data) {
  if (is_numeric($data)) {
    $node = node_load(array("nid" => $data));
    $riders = $node->field_ride_current_riders;
  } else if (is_array($data))
    $riders = $data;
  else if (is_object($data))
    $riders = $data->field_ride_current_riders;
  else
    return 0;
  $no_of_riders = 0;
  if (is_array($riders)) {
    foreach($riders as $val){
      if (is_numeric($val['uid']))
        $no_of_riders = $no_of_riders + 1;
    }
  }
  return $no_of_riders;
}

function nycc_rides_count_waiters($data) {
  if (is_numeric($data)) {
    $node = node_load(array("nid" => $data));
    $waiters = $node->field_ride_waitlist;
  } else if (is_array($data))
    $waiters = $data;
  else if (is_object($data))
    $waiters = $data->field_ride_waitlist;
  else
    return 0;
  $no_of_waiters = 0;
  if (is_array($waiters)) {
    foreach($waiters as $val){
      if (is_numeric($val['uid']))
        $no_of_waiters = $no_of_waiters + 1;

      // foreach($val as $current_waiter_uid){
      //    if (is_numeric($current_waiter_uid))
      //      $no_of_waiters = $no_of_waiters + 1;
      //  }
     }
  }
  return $no_of_waiters;
}

function nycc_rides_refs2ids($refs) {
  $ids = array();
  if (!is_array($refs))
    return $ids;
  foreach ($refs as $ref) {
    $id = array_values($ref);
    $ids[] = $id[0];
  }
  return $ids;
}

function nycc_rides_noderefs2userrefs($nrefs) {
  $urefs = array();
  if (!is_array($nrefs))
    return $urefs;
  foreach ($nrefs as $nref) {
    $cp = node_load(array('nid' => $nref['nid']));
    if ($cp)
      $urefs[] = array('uid' => $cp->uid);
  }
  return $urefs;
}

function nycc_rides_can_modify_ride($ride, $account = null) {
  if (nycc_is_leader($ride, $account))
    return true;
//   if (nycc_is_captain($ride, $account))
//     return true;
  return nycc_rides_can_approve($account);
}

function nycc_rides_can_approve($account = null) {
  global $user;
  if (!$account)
    $account = $user;
  if (!is_object($account))
    return false;
  $roles = array_values($account->roles);
  if (!is_array($roles))
    return false;
  if (in_array('administer', $roles) || in_array('vp of rides', $roles) || in_array('ride coordinator', $roles))
    return true;
  // just check for ride coordinator role and do not check for level as we are not comparing with ride level anyway
  /*
  $cp = content_profile_load('profile', $account->uid);
  foreach ($cp->field_ride_coordinator as $rc) {
    if (drupal_strlen($rc['value']))
      return true;
  }
  */
  return false;
}

function nycc_rides_output_button($title, $href, $class = "", $onclick = "", $msg = "") {
  $titlesafe = str_replace("'", "&apos;", $title);
  $onclicksafe = str_replace("'", "&apos;", $onclick);
  $hrefsafe = str_replace("'", "&apos;", $href);
  $output = "<div class='nycc-button-wrapper $class'>". ($msg ? "<div>$msg</div>" : "") ."<a href='$hrefsafe' title='$titlesafe' ". ($onclicksafe ? "onclick='$onclicksafe'" : "") ." >$title</a></div>";
  return $output;
}

function nycc_rides_output_block($title, $html, $classes = "") {
  $title = drupal_strlen($title) ? "<h2>$title</h2>" : "";
  $output = "<div class='nycc-block $classes'>$title$html</div>";
  return $output;
}


function nycc_rides_get_leader_emails($leaders, $separator = ", ") {
  global $user;
  foreach($leaders as $leader) {
    if (drupal_strlen($output))
      $output .=  $separator;
    $cp = node_load(array('nid' => $leader['nid']));
    $account = user_load($cp->uid);
    $title = $cp->title;
    $mail = $account->mail;
    if ($user->uid && in_array("paid-member", $user->roles))
      $output .= "<a href='mailto:$mail'>$title</a>";
    else
      $output .= $title;
  }
  return $output;
}





function nycc_rides_get_rider_emails($riders, $separator = ", ") {
  foreach($riders as $rider) {
    if (drupal_strlen($output))
      $output .=  $separator;
    $account = user_load($rider['uid']);
    $cp = content_profile_load('profile', $account->uid);
    $title = $cp->title;
    $mail = $account->mail;
    $output .= "<a href='mailto:$mail'>$title</a>";
  }
  return $output;
}

function nycc_rides_get_all_leader_emails($ride) {
  //if ($ride > 0)
  //  $ride = node_load($ride);
  if (!$ride || $ride->type != 'rides' || !$ride->field_ride_leaders || !is_array($ride->field_ride_leaders))
    return "";
  foreach($ride->field_ride_leaders as $leader) {
    if (drupal_strlen($mail))
      $mail .= ",";
    $cp = node_load(array('nid' => $leader['nid']));
    $account = user_load($cp->uid);
    $mail .= $account->mail;
  }
  return $mail;
}

function nycc_rides_get_all_leader_names($ride) {
  if ( $ride->type != 'rides' || !$ride->field_ride_leaders || !is_array($ride->field_ride_leaders))
    return "";
 
  foreach($ride->field_ride_leaders as $leader) {
    
//    watchdog("rides", " processing leader with nid: " . $leader_uid);
    if (drupal_strlen($names))
        $names .= ", ";
   if (is_numeric($leader['nid']) && $leader['nid'] >0) {
       $cp = node_load(array('nid' => $leader['nid']));
       
       if(is_object($cp)) {
         $names .= $cp->field_first_name[0]['value'] . " " . $cp->field_last_name[0]['value'];
//        	watchdog("rides", "nycc_get_all_leader_names: names is now: " . $names);
//       } else {
//            watchdog("rides", "nycc_get_all_leader_names: content profile is null");
       }
//    } else {
//         watchdog("rides", "nycc_get_all_leader_names: leader->uid is null or 0 ");
    }
  }
  return $names;
}



function nycc_rides_get_all_rider_emails($ride, $include_leaders = true) {
  //if ($ride > 0)
  //  $ride = node_load($ride);
  if (!$ride || $ride->type != 'rides')
    return "";
  $mail = $include_leaders ? nycc_rides_get_all_leader_emails($ride) : "";
  if ($ride->field_ride_current_riders && is_array($ride->field_ride_current_riders)) {
    foreach($ride->field_ride_current_riders as $rider) {
      if (drupal_strlen($mail))
        $mail .= ",";
      $account = user_load($rider['uid']);
      $mail .= $account->mail;
    }
  }
  return $mail;
}

function nycc_rides_get_all_waitlist_emails($ride) {
  //if ($ride > 0)
  //  $ride = node_load($ride);
  if (!$ride || $ride->type != 'rides')
    return "";
  $mail = "";
  if ($ride->field_ride_waitlist && is_array($ride->field_ride_waitlist)) {
    foreach($ride->field_ride_waitlist as $waiter) {
      if (drupal_strlen($mail))
        $mail .= ",";
      $account = user_load($waiter['uid']);
      $mail .= $account->mail;
    }
  }
  return $mail;
}

function nycc_rides_speed2num($str) {
  $num = preg_match('/[0-9]+/', $str, $matches);
  return $num ? $matches[0] : 0;
}

function nycc_rides_spots_remaining($ride) {
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  $no_of_spots = trim($ride->field_ride_spots[0]['value']);
  if (!$no_of_spots)
    return "Unlimited";
  $available_spots = $no_of_spots - nycc_rides_count_riders($ride);
  $no_of_waiters = nycc_rides_count_waiters($ride);
  if (!$available_spots && $no_of_waiters) {
    return  "$available_spots of $no_of_spots<br/>($no_of_waiters on waitlist)";
  }
  return "$available_spots of $no_of_spots";
}

function nycc_rides_has_spots($ride) {
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  $no_of_riders = nycc_rides_count_riders($ride);
  $no_of_spots = trim($ride->field_ride_spots[0]['value']);
  $available_spots = $no_of_spots - $no_of_riders;
  return (!$no_of_spots || ($available_spots > 0));
}

function nycc_rides_get_ride_status($ride) {
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  if ($ride->field_ride_status && drupal_strlen($ride->field_ride_status[0]['value']))
    return $ride->field_ride_status[0]['value'];
  $sql = "SELECT field_ride_status_value FROM {content_type_rides} WHERE nid = %d AND vid =%d";
  $q = db_query($sql, $ride->nid, $ride->vid);
  $r = db_fetch_object($q);
  return $r->field_ride_status;
}

function nycc_rides_get_ride_datetime($ride) {
  //if (!is_object($ride))
  //  return "";
  $d = $ride->field_date_ride_first[0]['value'];
  $h = $ride->field_ride_start_time_hour[0]['value'];
  $m = $ride->field_ride_start_time_min[0]['value'];
  $s = $ride->field_ride_start_time_select[0]['value'];
  if ($s == "PM")
    $h += 12;
  //dsm(nycc_rides_get_date($d, "Y-m-d") ." ". $h .":". $m .":00");
  return nycc_rides_get_date($d, "Y-m-d") ." ". $h .":". $m .":00";
}

// todo: change to limit to "within 4 hours" - DONE
// also: only for cue-sheet rides -- THIS IS NOW FOR ALL RIDES
function nycc_rides_get_user_ride_counts($timestamp, $acct = null) {
  global $user;
  if (is_numeric($acct))
    $uid = $acct;
  if (is_null($acct))
    $uid = $user->uid;
  if (is_object($acct))
    $uid = $acct->uid;
  //$date = nycc_rides_get_date($date, "Y-m-d");
  // removed from query:  AND R.field_ride_type_value = "Cue Sheet Ride"
  // mss - 2014-08-14: added max on vid to ensure no matches against older revisions
  $sql =<<<EOS
SELECT COUNT(*) AS cnt FROM content_field_ride_current_riders C, content_type_rides R WHERE C.nid = R.nid AND C.vid = R.vid AND R.field_ride_status_value = "Approved" AND C.field_ride_current_riders_uid = $uid AND R.vid = (SELECT MAX(N.vid) FROM node_revisions N WHERE N.nid = R.nid) AND
  UNIX_TIMESTAMP(CONCAT(
    DATE_FORMAT(R.field_date_ride_first_value, "%Y-%m-%d"),
    "T",
    If(R.field_ride_start_time_select_value = "AM", R.field_ride_start_time_hour_value, R.field_ride_start_time_hour_value+12),
    ":",
    R.field_ride_start_time_min_value,
    ":00"
  ))
  BETWEEN $timestamp - 60 * 60 * 4 AND $timestamp + 60 * 60 * 4;
EOS;
  //dsm($sql);
  $q = _db_query($sql); //, $uid, $timestamp, $timestamp);
  $r = db_fetch_object($q);
  //dsm($r->cnt);
  return $r ? $r->cnt : 0;
}

function nycc_rides_output_similar_rides($ride) {
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  $today = date('"Y-m-d"');
  $sql = "SELECT n.nid, n.title, r.field_date_ride_first_value AS date, r.field_ride_status_value AS status FROM {node} n, {content_type_rides} r WHERE n.nid = r.nid AND n.vid = r.vid AND n.type='rides' AND n.status <> 0 AND n.title = '%s' AND n.nid <> %d AND field_ride_status_value <> 'cancelled' AND field_date_ride_first_value > '%s' ORDER BY 3 DESC, 1 DESC";
  // and date in future?
  $output = "<div class='similar-rides'>";
  $output .= "<h2>" .t("Similar Rides") ."</h2>";
  $output .= "<ul>";
  $q = db_query($sql, $ride->title, $ride->nid, $today);
  while($row = db_fetch_array($q)) {
    $found = true;
    //$path = drupal_get_path_alias("node/". $row['nid']);
    $path = "node/". $row['nid'];
    $output .= "<li class='ride'><a target='_blank' title='View ride details...' href=\"/". $path ."\"> " . $row['title'] . "</a> - " . date("m/d/Y", strtotime($row['date'])) . " - ". substr($row['status'], 0, 1) ."</li>";
  }
  if (!$found)
    $output .= "<li class='no-rides'>" .t("No other rides found."). "</li>";
  $output .= "</ul>";
  $output .= "</div>";
  return $output;
}

function nycc_rides_get_date($dstr, $fmt = "Y-m-d") {
  if (!is_string($dstr))
    return false;
  $d = strtotime($dstr);
  if (!$d)
    return false;
  return date($fmt, $d);
}

function nycc_rides_ride_exists($title, $date) {
  $date = nycc_rides_get_date($date);
  $sql = "SELECT n.nid FROM {node} n, {content_type_rides} r WHERE n.nid = r.nid AND n.vid = r.vid AND n.type = 'rides' AND n.title = '%s' AND r.field_date_ride_first_value LIKE '%s%%'";
  $q = db_query($sql, $title, $date);
  if (db_fetch_array($q))
    return true;
  return false;
}

function nycc_rides_ride_has_images($data) {
  if (is_numeric($data)) {
    $node = node_load(array("nid" => $data));
    $images = $node->field_ride_image;
  } else if (is_array($data))
    $images = $data;
  else if (is_object($data))
    $images = $data->field_ride_image;
  else
    return false;
  //dsm($data);
  if (is_array($images)) {
    foreach($images as $img){
      if (drupal_strlen($img['view']))
        return true;
    }
  }
  return false;
}

function nycc_rides_ride_has_attachments($data) {
  if (is_numeric($data)) {
    $node = node_load(array("nid" => $data));
    $attachments = $node->field_ride_attachments;
  } else if (is_array($data))
    $attachments = $data;
  else if (is_object($data))
    $attachments = $data->field_ride_attachments;
  else
    return false;
  //dsm($data);
  if (is_array($attachments)) {
    foreach($attachments as $attachment){
      if (drupal_strlen($attachment['filename']))
        return true;
    }
  }
  return false;
}



function nycc_rides_is_ride_leader($account = null, $cp = null) {
  global $user;
  if (!$account)
    $account = $user;
  else if (is_numeric($account))
    $account = user_load(array("uid" => $account));
  if (!is_object($cp))
    $cp = content_profile_load('profile', $account->uid);

  // todo: limit rides to future or today and approved rides

  // get array of ride id's that reference leader $cp->nid
  $ridesl = array();
  $sql = "SELECT l.nid FROM content_field_ride_leaders l WHERE field_ride_leaders_nid = %d";
  $q = db_query($sql, $cp->nid);
  while ($r = db_fetch_object($q)) {
    $ridesl[] = $r->nid;
  }
  // get array of ride id's that reference rider $user->uid (current user)
  $ridesr = array();
  $sql = "SELECT r.nid FROM content_field_ride_current_riders r WHERE field_ride_current_riders_uid = %d";
  $q = db_query($sql, $user->uid);
  while ($r = db_fetch_object($q)) {
    $ridesr[] = $r->nid;
  }
  return array_intersect($ridesr, $ridesl);
}

// todo: get last 'approved' revision
function nycc_rides_get_last_revision_id($ride) {
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  if (!$ride)
    return null;
  $nrl = node_revision_list($ride);
  if (is_array($nrl) && count($nrl)) {
    array_shift($nrl);
    $o = array_shift($nrl);
    return $o->vid;
  }
  return null;
}

function nycc_rides_last_approved_revision($ride) {
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  if (!$ride)
    return null;
  $nrl = node_revision_list($ride);
  if (is_array($nrl) && count($nrl)) {
    foreach ($nrl as $rev) {
      $revnode = node_load(array('nid' => $ride->nid), $rev->vid);
      if ($revnode && $revnode->field_ride_status[0]['value'] == 'Approved')
        return $revnode;
    }
  }
  return null;
}



// function nycc_rides_ride_attend(&$form_state, $node) {
//   if (is_numeric($node))
//     $node = node_load(array('nid' => $node));
// 
// 
//   // TODO: ensure that this works if no journal module
//   nycc_rides_turn_off_journal_form('nycc_rides_ride_attend');
// 
//   $can_modify = nycc_rides_can_modify_ride($node);
// 
//   // WARNING: do not save node unless next line replaced with safe gid calculation
// //   $gps = $node->og_groups;
// //   $groupid = count($gps) ? array_shift($gps) : 0;
// //   // TODO: restrict to leaders, group admins, vpor, ride coordinator, administer
//   if (!$can_modify /*&& !nycc_rides_is_rider($node)*/) {
//     $form['error'] = array(
//       '#type' => 'markup',
//       '#value' => $groupid ? "This information is restricted to ride leaders, captains and administrators." : "This information is restricted to ride leaders, participants and administrators.",
//     );
//     return $form;
//   }
// 
//   if ($node->type != 'rides') {
//     $form['error'] = array(
//       '#type' => 'markup',
//       '#value' => "This is not a ride!",
//     );
//     return $form;
//   }
// 
//   $numriders = nycc_rides_count_riders($node);
//   if (!$numriders) {
//     $form['error'] = array(
//       '#type' => 'markup',
//       '#value' => "There are no riders or this is not a ride!",
//     );
//     return $form;
//   }
// 
//   $form['nid'] = array(
//     '#value' => $node->nid,
//     '#type' => 'hidden',
//     '#name' => 'nid',
//   );
// 
//   $form['date'] = array(
//     '#type' => 'markup',
//     '#prefix' => '<div class="nycc-attendance-date">',
//     '#value' => substr($node->field_date_ride_first[0]['value'], 0, 10) ." ". $node->field_ride_start_time_hour[0]['value'] .":". $node->field_ride_start_time_min[0]['value'] ." ". $node->field_ride_start_time_select[0]['value'],
//     '#suffix' => '</div>',
//   );
// 
//   $form['from'] = array(
//     '#type' => 'markup',
//     '#prefix' => '<div class="nycc-attendance-from">',
//     '#value' => $node->field_ride_from[0]['value'] . $node->field_ride_from_select[0]['value'],
//     '#suffix' => '</div>',
//   );
// 
//   if ($can_modify) {
//     $form['instructions'] = array(
//       '#type' => 'markup',
//       '#prefix' => '<div class="nycc-attendance-instructions">',
//       '#value' => $groupid ? "Check each member that attended this ride, add notes, scores and press 'Update'." : "Check each member that attended this ride and press 'Update'.",
//       '#suffix' => '</div>',
//     );
// 
//     $form['toggle'] = array(
//       '#type' => 'markup',
//       '#prefix' => '<div class="nycc-attendance-toggle">',
//       '#value' => "<a href='#' title='Toggle all checkboxes on/off...'>Toggle all checkboxes on/off</a>",
//       '#suffix' => '</div>',
//     );
//   }
// 
//   // load $notes array, indexed by user ids
//   $notes = array();
//   $scores = array();
//   $sql = "SELECT uid, notes, score FROM {nycc_ride_notes} WHERE nid = %d";
//   $q = db_query($sql, $node->nid);
//   while($r = db_fetch_object($q)) {
//     $notes[$r->uid] = $r->notes;
//     $scores[$r->uid] = $r->score;
//   }
// 
//   foreach ($node->field_ride_current_riders as $rider) {
//     $rider_user = user_load(array('uid' => $rider['uid']));
//     $profile_node = content_profile_load('profile', $rider['uid']);
//     $form['hr-'. $rider['uid']] = array(
//       '#type' => 'markup',
//       '#value' => '<hr/>',
//     );
//     $form['uid-'. $rider['uid']] = array(
//       '#type' => 'checkbox',
//       '#attributes' => array('class' => 'attendance'),
//       '#title' => '<strong>' . $profile_node->title . "</strong> (". $rider_user->mail .")",
//       '#disabled' => !$can_modify,
//     );
//     // only show score and notes for group rides
//     if ($groupid) {
//       $form['score-'. $rider['uid']] = array(
//         '#type' => 'textfield',
//         '#attributes' => array('class' => 'score'),
//         '#title' => 'Score',
//         '#value' => $scores[$rider['uid']],
//         '#disabled' => !$can_modify,
//         '#description' => 'Max 32 characters.',
//         '#maxlength' => 32,
//         '#size' => 32,
//       );
//       $form['notes-'. $rider['uid']] = array(
//         '#type' => 'textarea',
//         '#attributes' => array('class' => 'notes'),
//         '#title' => 'Notes',
//         '#value' => $notes[$rider['uid']],
//         '#disabled' => !$can_modify,
//       );
//     } else {
//       $form['score-'. $rider['uid']] = array(
//         '#type' => 'hidden',
//         '#value' => "",
//       );
//       $form['notes-'. $rider['uid']] = array(
//         '#type' => 'hidden',
//         '#value' => "",
//       );
//     }  // $groupid
//   }
// 
//   foreach ($node->field_ride_attendees as $attendee) {
//     if ($attendee['uid'])
//       $form['uid-'. $attendee['uid']]['#default_value'] = true;
//   }
// 
//   // todo: check for particpants, ride status, etc - do this for button/link display too
// 
//   // todo: consider access. who can view and who can edit?
//   // todo: consider: view only version, checkboxes disabled and no save button or disabled, extra message as to why
// 
//   // todo: output descriptive text: date/time, location, speed, etc.
// 
//   // wishlist: show user icons/pictures
//   // wishlist: show link for user contact
// 
//   if ($can_modify) {
//     $form['button'] = array(
//       '#type' => 'submit',
//       '#value' => t('Update'),
//       //'#attributes' => array('class' => 'hide'),
//       '#id' => 'nycc-update-attendance',
//     );
//   }
// 
//   $form['cancel'] = array(
//     '#type' => 'markup',
//     //'#prefix' => '<div class="nycc-attendance-cancel">',
//     '#value' => "<a href='/node/". $node->nid ."' title='Return to ride page...'>$msg</a>",
//     //'#suffix' => '</div>',
//   );
// 
//   drupal_set_title("Ride Attendance for ". $node->title);
// 
//   $msg = $can_modify ? "Cancel changes, return to ride page" : "Return to ride page";
//   return $form;
// }
// 
// function nycc_ride_attend_submit($form, &$form_state) {
//   //dpm($form['#post']);
//   //dpm(get_defined_vars());
//   $node = node_load(array('nid' => arg(1)));
//   if ($node) {
//     // BUG: node is resaved
//     $gps = $node->og_groups;
//     $groupid = count($gps) ? array_shift($gps) : NULL;
// 
//     unset($node->field_ride_attendees);
//     $node->field_ride_attendees = array();
//     //foreach ($form_state['values'] as $ndx => $value) {
//     //  list($prefix, $uid) = explode("-", $ndx);
//     //}
//     $scores = array();
//     foreach ($form['#post'] as $ndx => $value) {
//       list($prefix, $uid) = explode("-", $ndx);
//       if (($prefix == 'uid') && $uid && ($value==1))
//         $node->field_ride_attendees[] = array('uid' => $uid);
//       if (($prefix == 'score') && $uid)
//         $scores[$uid] = $value;
//     }
//     //dpm(array($scores));
//     foreach ($form['#post'] as $ndx => $value) {
//       list($prefix, $uid) = explode("-", $ndx);
//       $value = trim($value);
//       if (($prefix == 'notes') && $uid) {
//         //$sql = "REPLACE INTO {nycc_ride_notes} (uid, nid, notes) VALUES (%d, %d, '%s')";
//         //$q = db_query($sql, $uid, $node->nid, $value);
//         if (db_result(db_query('SELECT 1 FROM {nycc_ride_notes} WHERE uid = %d AND nid = %d', $uid, $node->nid))) {
//           if (drupal_strlen($value) || drupal_strlen($scores[$uid])) {
//             $sql = "UPDATE {nycc_ride_notes} SET notes = '%s', score = '%s', gid = %d WHERE uid = %d AND nid = %d";
//             $q = db_query($sql, $value, $scores[$uid], $groupid, $uid, $node->nid);
//           } else {
//             $sql = "DELETE FROM {nycc_ride_notes} WHERE uid = %d AND nid = %d";
//             $q = db_query($sql, $uid, $node->nid);
//           }
//         } else {
//           if (drupal_strlen($value) || drupal_strlen($scores[$uid])) {
//             $sql = "INSERT INTO {nycc_ride_notes} (uid, nid, gid, notes, score) VALUES (%d, %d, %d, '%s', '%s')";
//             $q = db_query($sql, $uid, $node->nid, $groupid, $value, $scores[$uid]);
//           }
//         }
//       }
//     }
//     $node->field_ride_additional_dates[0]['value'] = "";
//     if (!count($node->field_ride_attendees))
//       $node->field_ride_attendees[0] = NULL;
//     if (!isset($node->field_ride_waitlist))
//       $node->field_ride_waitlist = array(0 => NULL);
//     //dpm($node->field_ride_waitlist);
//     node_save($node);
//     drupal_set_message("Ride attendance and notes updated.");
//   }
// }

// to do: check node type = rides
function nycc_rides_ride_cancel_confirm(&$form_state, $node) {
  if (is_numeric($node))
    $node = node_load(array('nid' => $node));

  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );

  return confirm_form($form,
    t('Are you sure you want to cancel %title?', array('%title' => $node->title)),
    isset($_GET['destination']) ? $_GET['destination'] : 'node/'. $node->nid .'/edit',
    //t('This action cannot be undone.'),
    t("This action will cause email notifications to be sent to all particpants, leaders and ride coordinators"),
    t('Yes, cancel this ride'),
    t('No, return to edit form')
  );
}

function nycc_rides_ride_cancel_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $ride = node_load(array('nid' => $form_state['values']['nid']));
    nycc_rides_update_ride_status($ride, 'Cancelled');
    drupal_set_message('Ride '. $ride->title .' cancelled');
  }
  $form_state['redirect'] = 'node/'. $form_state['values']['nid'];
}

function nycc_rides_access($op, $node, $account = NULL) {
  global $user;

  if (!$node || !in_array($op, array('cancel'), TRUE)) {
    // If there was no node to check against, or the $op was not one of the
    // supported ones, we return access denied.
    return FALSE;
  }
  // // Convert the node to an object if necessary:
  // if ($op != 'create') {
  //   $node = (object)$node;
  // }
  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    $account = $user;
  }

  //if (user_access('administer nodes', $account)) {
    return TRUE;
  //}

  //return FALSE;
}


function nycc_rides_get_ride_coordinator_emails($data) {
  if (is_numeric($data)) {
    $ride = node_load(array('nid' => $data));
    if ($ride)
      $level = $ride->field_ride_level_select[0]['value'];
  } else if (is_string($data) && strlen($data) == 1 && in_array(strtolower($data), array('a', 'b', 'c'))) {
    $level = $data;
  }
  else if (is_object($data) && $data->type && ($data->type == 'rides')) {
    $level = $data->field_ride_level_select[0]['value'];
  } else {
    return "";
  }

  $sql = "SELECT u.mail FROM users u, content_type_profile cp, node np, content_field_ride_coordinator cfc WHERE np.uid = u.uid AND np.nid = cp.nid AND np.vid = cp.vid AND cfc.nid = np.nid AND cfc.vid = np.vid AND cfc.field_ride_coordinator_value = '%s'";

  $q = db_query($sql, $level);
  while($r = db_fetch_object($q)) {
    if (drupal_strlen($mail))
      $mail .= ",";
    $mail .= $r->mail;
  }
  return $mail;
}

function nycc_rides_get_ride_coordinator_names($data) {
  if (is_numeric($data)) {
    $ride = node_load(array('nid' => $data));
    if ($ride)
      $level = $ride->field_ride_level_select[0]['value'];
  } else if (strlen($data) == 1 && in_array(strtolower($data), array('a', 'b', 'c'))) {
    $level = $data;
  }
  else if (is_object($data) && $data->type && ($data->type == 'rides')) {
    $level = $data->field_ride_level_select[0]['value'];
  } else {
    return "";
  }

  $sql = "SELECT cp.title FROM content_type_profile cp, node np, content_field_ride_coordinator cfc WHERE np.nid = cp.nid AND np.vid = cp.vid AND cfc.nid = np.nid AND cfc.vid = np.vid AND cfc.field_ride_coordinator_value = '%s'";

  $q = db_query($sql, $level);
  while($r = db_fetch_object($q)) {
    if (drupal_strlen($names))
      $names .= ", ";
    $names .= $r->title;
  }

  return $names;
}



function nycc_rides_approve_rides() {
  global $user;
  $output = "Access denied";
  $title = "Approve Rides";
  $profile_node = content_profile_load('profile', $user->uid );
  if(isset($profile_node->field_ride_coordinator[0]['value'])) {
    $level = substr($profile_node->field_ride_coordinator[0]['value'], 0, 1);
    $title = "Approve $level-Rides";
    $output = views_embed_view('roster_of_rides', 'page_1', $level);
  }
  else if (in_array("vp of rides", $user->roles) || in_array("administer", $user->roles) ) {
    $output = views_embed_view('roster_of_rides', 'page_2');
  }
  drupal_set_title($title);
  return $output;
}

// function nycc_menu_alter(&$items) {
//   //var_dump($items);
// }

function nycc_rides_join_ride_form($ride) {
  $rid = is_object($ride) ? $ride->nid : $ride;
  $form = array(
    //'#action' => 'nycc-join-ride',
  );
  $form['nid'] = array(
    '#value' => $rid,
    '#type' => 'hidden',
    '#name' => 'nid',
  );
  $form['button'] = array(
    '#type' => 'submit',
    '#value' => t('Join this ride or waiting list'),
    '#attributes' => array('class' => 'hide'),
    '#id' => 'nycc-join-ride',
  );
  return "<form method='post' action='/nycc-join-ride/$rid'>". drupal_render($form) ."</form>";
}

function nycc_rides_withdraw_from_ride_form($ride) {
  $rid = is_object($ride) ? $ride->nid : $ride;
  $form = array(
    //'#action' => 'nycc-withdraw-from-ride',
  );
  $form['nid'] = array(
    '#value' => $rid,
    '#type' => 'hidden',
    '#name' => 'nid',
  );
  $form['button'] = array(
    '#type' => 'submit',
    '#value' => t('Withdraw from this ride or waiting list'),
    '#attributes' => array('class' => 'hide'),
    '#id' => 'nycc-withdraw-from-ride',
  );
  return "<form method='post' action='/nycc-withdraw-from-ride/$rid'>". drupal_render($form) ."</form>";
}


function nycc_rides_turn_off_journal_form($form_id = "unknown") {
  $journal_form_ids = variable_get('journal_form_ids', array());
  if (!array_key_exists($form_id, $journal_form_ids)) {
    $journal_form_ids[$form_id] = 0;
    variable_set('journal_form_ids', $journal_form_ids);
  }
}


// 
// function nycc_rides_ride_reminder($timestamp) {
//   $rrp = variable_get(nycc_ride_reminder_period, 48);
//   $rrps = $rrp * 60 * 60;
//   $r1 = $timestamp + $rrps;
//   $r2 = $r1 + 60 * 60 - 1;
//   // TODO: check for send ride reminders on ride
//   // query for all approved rides whose start date and time is during rrp from timestamp
//   $sql =<<<EOS
// SELECT N.nid as nid FROM {node} N, {content_type_rides} R 
// WHERE N.nid = R.nid AND N.vid = R.vid AND R.field_ride_status_value = "Approved" AND N.type = "rides" AND
//   UNIX_TIMESTAMP(CONCAT(
//     DATE_FORMAT(R.field_date_ride_first_value, "%Y-%m-%%d"),
//     "T",
//     If(R.field_ride_start_time_select_value = "AM", R.field_ride_start_time_hour_value, IF(R.field_ride_start_time_hour_value < 12, R.field_ride_start_time_hour_value+12, R.field_ride_start_time_hour_value-12)),
//     ":",
//     R.field_ride_start_time_min_value,
//     ":00"
//   ))
//   BETWEEN $r1 AND $r2;
// EOS;
//   $q = db_query($sql);
//   while ($row = db_fetch_object($q)) {
//     $ride = node_load(array('nid' => $row->nid));
//     //$rfound = true;
//     watchdog("ride reminders", date("H:i:s") ." - <a href='/node/". $ride->nid ."'>". $ride->title ."</a>", array(), WATCHDOG_INFO);
//     if ($ride) {
//       $current_riders = $ride->field_ride_current_riders;
//       //$rfound2 = false;
//       foreach($current_riders as $val) {
//         //$rfound2 = true;
//         //watchdog("ride reminders", "rider found: ". var_export($val, 1));
//         $acct = user_load($val['uid']);
//         if ($acct) {
//           $cp = content_profile_load('profile', $acct->uid);
//           if ($cp) {
//             if ($cp->field_ride_reminders[0]['value'] != "false") {
//               $context = array('hook' => 'cron', 'op' => 'send', 'node' => $ride, 'user' => $acct /*, 'profile'=> $cp*/);
//               actions_do(2, $acct, $context);     // 2 is the email action for ride reminders
//               watchdog("ride reminders", $acct->mail ." sent a reminder for ride <a href='/node/". $ride->nid ."'>". $ride->title ."</a>", array(), WATCHDOG_INFO);
//             }
//           }  // cp
//         } // acct
//       }  // for
//       //if (!$rfound2)
//         //watchdog("ride reminders", "no riders found");
//       // mark ride as notified (todo: add cck field for this and add to query)
//     }  // ride
//   }  // while
//   //var_dump($row);
//   //if (!$rfound)
//   //  watchdog("ride reminders", "no rides found");
// }
// 
// function nycc_ride_reminders_test($timestr) {
// //  if (($timestr > 0) || ($timestr < 0))
// //    $timestr .= " day";
//   $t = strtotime($timestr);
//   if (!$t)
//     $t = time();
//   nycc_ride_reminder($t);
//   print "$timestr = $t done! check the watchdog log - current time is ". time();
// }

function nycc_rides_cron() {
  //watchdog('cron', 'starting nycc_cron');
//  nycc_ride_reminder(time());
//  nycc_ride_overlaps_reminder();
//  nycc_ride_roster_email(time(), 1);
  
  //watchdog('cron', 'finished nycc_cron');  
}

// function nycc_ride_overlaps_reminder() {
//   $now = time();
//   $lastcron = variable_get("nycc_last_ride_overlaps_cron_time", 0);
//   if (($now - $lastcron) < 24 * 60 * 60)
//     return;
//   variable_set("nycc_last_ride_overlaps_cron_time", $now);
//   watchdog("rides", "checking for ride overlaps", array(), WATCHDOG_INFO);
// 
//   $sql =<<<EOS
// SELECT T1.uid, T1.nid AS ride1, T1.title AS title1, T1.time AS time1, T1.date AS date1, T1.joined AS joined1,
// T2.nid AS ride2, T2.title AS title2, T2.time AS time2, T2.date AS date2, T2.joined AS joined2, TIMESTAMPDIFF(MINUTE, T1.time, T2.time) AS diff
// FROM viewRideSignups T1, viewRideSignups T2
// WHERE T1.uid = T2.uid AND T1.date = T2.date AND ((T1.time <= T2.time AND T1.nid < T2.nid) OR (T1.time < T2.time))
// AND TIMESTAMPDIFF(MINUTE, T1.time, T2.time) < 4 * 60
// AND (T1.joined = 1 OR T2.joined = 1)
// AND (T1.uid, T1.date) IN
//   (SELECT uid, date FROM viewRideSignups
//    GROUP BY uid, date
//    HAVING count(*) > 1
//   )
// ORDER BY T1.uid, T1.date;
// EOS;
// 
//   $lastuid = 0;
//   $lastdate = "";
//   $text = "";
// 
//   $q = db_query($sql);
//   while ($row = db_fetch_object($q)) {
//     if ($lastuid != $row->uid) {
//       if (drupal_strlen($text)) {
// 
//         $acct = user_load($lastuid);
//         if ($acct) {
//           $cp = content_profile_load('profile', $acct->uid);
//           if ($cp) {
//               $cp->field_profile_extra[0]['value'] = $text ."\n\n";
//               $context = array('hook' => 'cron', 'op' => 'send', 'node' => $cp, 'user' => $acct);
//               actions_do(3, $acct, $context);     // 3 is the email action for ride overlap reminders
//               watchdog("ride overlaps", "email user <a href='/user/". $acct->uid ."'>". $acct->name ."</a>", array(), WATCHDOG_INFO);
//           }  // cp
//         } // acct
//         $text = "";
//         $lastdate = "";
//       }
//     }
//     // TODO: use row data to generate line for email, end with newline
//     // fields: uid, ride1, time1, date1, joined1, ride2, time2, date2, joined2, diff
//     //$line = var_export($row, 1) ."\n";
//     if ($row->date1 != $lastdate)
//       $text .= substr($row->date1, 0, 10) . "\n\n";
//     $line = "Ride <a href='http://nycc.org/node/". $row->ride1 ."'>". $row->title1 ."</a> at ". substr($row->time1, 11, 5) ." (". ($row->joined1 ? "joined" : "waiting") .")\n overlaps with <a href='http://nycc.org/node/". $row->ride2 ."'>". $row->title2 ."</a> at ". substr($row->time2, 11, 5) ." (". ($row->joined2 ? "joined" : "waiting") .")\n\n";
//     $text .= $line;
//     $lastuid = $row->uid;
//     $lastdate = $row->date1;
//   }  // while
// }  // nycc_ride_overlaps_reminder
// 
// function nycc_ride_overlaps_user($acctuid, $ridetimestamp) {
//   if (!$ridetimestamp) {
//     // todo: fix this
//     //watchdog("nycc_ride_overlaps_user", "Invalid ride timestamp param: $ridetimestamp.", array(), WATCHDOG_INFO);
//     return 0;
//   }
//   $sql = "SELECT COUNT(*) AS cnt FROM {viewRideSignups} vrs WHERE joined = 0 AND uid = $acctuid AND TIMESTAMPDIFF(MINUTE, vrs.time, $ridetimestamp) < 4 * 60";
//   $q = db_query($sql);
//   if ($q) {
//     $row = db_fetch_object($q);
//     if ($row)
//       return $row->cnt;
//     else {
//       watchdog("nycc_ride_overlaps_user", "Unable to fetch row.", array(), WATCHDOG_ERROR);
//     }
//   } else {
//     watchdog("nycc_ride_overlaps_user", "Unable to execute query: $sql.", array(), WATCHDOG_ERROR);
//   }
//   return 0;
// }





function nycc_rides_approve_ride($ride = NULL) {
  if (!$ride)
    $ride = arg(1);
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  if (is_object($ride) && nycc_rides_can_approve()) {
    $ride->field_ride_status[0]['value'] = "Approved";
    $ride->field_ride_additional_dates[0]['value'] = "";
    node_save($ride);
    drupal_set_message('Ride Approved.');
    drupal_goto("node/" . $ride->nid);
  } else {
    drupal_set_message('You are not authorized to approve this ride.');
  }
}


// Note: str_getcsv requies php 5.3 or the function below
if (!function_exists('str_getcsv')) {
  function str_getcsv($input, $delimiter = ",", $enclosure = '"', $escape = "\\") {
    $fiveMBs = 5 * 1024 * 1024;
    $fp = fopen("php://temp/maxmemory:$fiveMBs", 'r+');
    fputs($fp, $input);
    rewind($fp);
    $data = fgetcsv($fp, 1000, $delimiter, $enclosure); //  $escape only got added in 5.3.0
    fclose($fp);
    return $data;
  }
}


?>
